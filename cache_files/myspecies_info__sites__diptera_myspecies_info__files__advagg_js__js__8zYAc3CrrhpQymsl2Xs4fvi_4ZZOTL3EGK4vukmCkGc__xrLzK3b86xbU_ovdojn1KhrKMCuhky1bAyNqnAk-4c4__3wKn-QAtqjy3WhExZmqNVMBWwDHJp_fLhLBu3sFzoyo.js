/*jslint browser: true */ /*global jQuery: true *//** * jQuery Cookie plugin * * Copyright (c) 2010 Klaus Hartl (stilbuero.de) * Dual licensed under the MIT and GPL licenses: * http://www.opensource.org/licenses/mit-license.php * http://www.gnu.org/licenses/gpl.html * */// TODO JsDoc/** * Create a cookie with the given key and value and other optional parameters. * * @example $.cookie('the_cookie', 'the_value'); * @desc Set the value of a cookie. * @example $.cookie('the_cookie', 'the_value', { expires: 7, path: '/', domain: 'jquery.com', secure: true }); * @desc Create a cookie with all available options. * @example $.cookie('the_cookie', 'the_value'); * @desc Create a session cookie. * @example $.cookie('the_cookie', null); * @desc Delete a cookie by passing null as value. Keep in mind that you have to use the same path and domain *       used when the cookie was set. * * @param String key The key of the cookie. * @param String value The value of the cookie. * @param Object options An object literal containing key/value pairs to provide optional cookie attributes. * @option Number|Date expires Either an integer specifying the expiration date from now on in days or a Date object. *                             If a negative value is specified (e.g. a date in the past), the cookie will be deleted. *                             If set to null or omitted, the cookie will be a session cookie and will not be retained *                             when the the browser exits. * @option String path The value of the path atribute of the cookie (default: path of page that created the cookie). * @option String domain The value of the domain attribute of the cookie (default: domain of page that created the cookie). * @option Boolean secure If true, the secure attribute of the cookie will be set and the cookie transmission will *                        require a secure protocol (like HTTPS). * @type undefined * * @name $.cookie * @cat Plugins/Cookie * @author Klaus Hartl/klaus.hartl@stilbuero.de *//** * Get the value of a cookie with the given key. * * @example $.cookie('the_cookie'); * @desc Get the value of a cookie. * * @param String key The key of the cookie. * @return The value of the cookie. * @type String * * @name $.cookie * @cat Plugins/Cookie * @author Klaus Hartl/klaus.hartl@stilbuero.de */jQuery.cookie = function (key, value, options) {    // key and value given, set cookie...    if (arguments.length > 1 && (value === null || typeof value !== "object")) {        options = jQuery.extend({}, options);        if (value === null) {            options.expires = -1;        }        if (typeof options.expires === 'number') {            var days = options.expires, t = options.expires = new Date();            t.setDate(t.getDate() + days);        }        return (document.cookie = [            encodeURIComponent(key), '=',            options.raw ? String(value) : encodeURIComponent(String(value)),            options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE            options.path ? '; path=' + options.path : '',            options.domain ? '; domain=' + options.domain : '',            options.secure ? '; secure' : ''        ].join(''));    }    // key and possibly options given, get cookie...    options = value || {};    var result, decode = options.raw ? function (s) { return s; } : decodeURIComponent;    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? decode(result[1]) : null;};;/**//*! * jQuery Form Plugin * version: 2.69 (06-APR-2011) * @requires jQuery v1.3.2 or later * * Examples and documentation at: http://malsup.com/jquery/form/ * Dual licensed under the MIT and GPL licenses: *   http://www.opensource.org/licenses/mit-license.php *   http://www.gnu.org/licenses/gpl.html */(function(a){function b(){if(a.fn.ajaxSubmit.debug){var b="[jquery.form] "+Array.prototype.join.call(arguments,"");window.console&&window.console.log?window.console.log(b):window.opera&&window.opera.postError&&window.opera.postError(b)}}a.fn.ajaxSubmit=function(c){function r(){function t(){if(!j.aborted){var c=i.contentWindow?i.contentWindow.document:i.contentDocument?i.contentDocument:i.document;if(!c||c.location.href==e.iframeSrc)if(!m)return;i.detachEvent?i.detachEvent("onload",t):i.removeEventListener("load",t,!1);var d=!0;try{if(m)throw"timeout";var f=e.dataType=="xml"||c.XMLDocument||a.isXMLDoc(c);b("isXml="+f);if(!f&&window.opera&&(c.body==null||c.body.innerHTML=="")&&--s){b("requeing onLoad callback, DOM not available"),setTimeout(t,250);return}j.responseText=c.body?c.body.innerHTML:c.documentElement?c.documentElement.innerHTML:null,j.responseXML=c.XMLDocument?c.XMLDocument:c,j.getResponseHeader=function(a){var b={"content-type":e.dataType};return b[a]};var g=/(json|script)/.test(e.dataType);if(g||e.textarea){var l=c.getElementsByTagName("textarea")[0];if(l)j.responseText=l.value;else if(g){var n=c.getElementsByTagName("pre")[0],o=c.getElementsByTagName("body")[0];n?j.responseText=n.textContent:o&&(j.responseText=o.innerHTML)}}else e.dataType=="xml"&&!j.responseXML&&j.responseText!=null&&(j.responseXML=u(j.responseText));q=w(j,e.dataType,e)}catch(p){b("error caught:",p),d=!1,j.error=p,e.error&&e.error.call(e.context,j,"error",p),k&&a.event.trigger("ajaxError",[j,e,p])}j.aborted&&(b("upload aborted"),d=!1),d&&(e.success&&e.success.call(e.context,q,"success",j),k&&a.event.trigger("ajaxSuccess",[j,e])),k&&a.event.trigger("ajaxComplete",[j,e]),k&&!--a.active&&a.event.trigger("ajaxStop"),e.complete&&e.complete.call(e.context,j,d?"success":"error"),setTimeout(function(){h.removeData("form-plugin-onload"),h.remove(),j.responseXML=null},100)}}function p(){var b=l.attr("target"),c=l.attr("action");d.setAttribute("target",f),d.getAttribute("method")!="POST"&&d.setAttribute("method","POST"),d.getAttribute("action")!=e.url&&d.setAttribute("action",e.url),e.skipEncodingOverride||l.attr({encoding:"multipart/form-data",enctype:"multipart/form-data"}),e.timeout&&setTimeout(function(){m=!0,t()},e.timeout);var g=[];try{if(e.extraData)for(var j in e.extraData)g.push(a('<input type="hidden" name="'+j+'" value="'+e.extraData[j]+'" />').appendTo(d)[0]);h.appendTo("body"),i.attachEvent?i.attachEvent("onload",t):i.addEventListener("load",t,!1),d.submit()}finally{d.setAttribute("action",c),b?d.setAttribute("target",b):l.removeAttr("target"),a(g).remove()}}var d=l[0];if(a(":input[name=submit],:input[id=submit]",d).length)alert('Error: Form elements must not have name or id of "submit".');else{var e=a.extend(!0,{},a.ajaxSettings,c);e.context=e.context||e;var f="jqFormIO"+(new Date).getTime(),g="_"+f,h=a('<iframe id="'+f+'" name="'+f+'" src="'+e.iframeSrc+'" />'),i=h[0];h.css({position:"absolute",top:"-1000px",left:"-1000px"});var j={aborted:0,responseText:null,responseXML:null,status:0,statusText:"n/a",getAllResponseHeaders:function(){},getResponseHeader:function(){},setRequestHeader:function(){},abort:function(){b("aborting upload...");var c="aborted";this.aborted=1,h.attr("src",e.iframeSrc),j.error=c,e.error&&e.error.call(e.context,j,"error",c),k&&a.event.trigger("ajaxError",[j,e,c]),e.complete&&e.complete.call(e.context,j,"error")}},k=e.global;k&&!(a.active++)&&a.event.trigger("ajaxStart"),k&&a.event.trigger("ajaxSend",[j,e]);if(e.beforeSend&&e.beforeSend.call(e.context,j,e)===!1){e.global&&a.active--;return}if(j.aborted)return;var m=0,n=d.clk;if(n){var o=n.name;o&&!n.disabled&&(e.extraData=e.extraData||{},e.extraData[o]=n.value,n.type=="image"&&(e.extraData[o+".x"]=d.clk_x,e.extraData[o+".y"]=d.clk_y))}e.forceSync?p():setTimeout(p,10);var q,r,s=50,u=a.parseXML||function(a,b){window.ActiveXObject?(b=new ActiveXObject("Microsoft.XMLDOM"),b.async="false",b.loadXML(a)):b=(new DOMParser).parseFromString(a,"text/xml");return b&&b.documentElement&&b.documentElement.nodeName!="parsererror"?b:null},v=a.parseJSON||function(a){return window.eval("("+a+")")},w=function(b,c,d){var e=b.getResponseHeader("content-type")||"",f=c==="xml"||!c&&e.indexOf("xml")>=0,g=f?b.responseXML:b.responseText;f&&g.documentElement.nodeName==="parsererror"&&a.error&&a.error("parsererror"),d&&d.dataFilter&&(g=d.dataFilter(g,c)),typeof g=="string"&&(c==="json"||!c&&e.indexOf("json")>=0?g=v(g):(c==="script"||!c&&e.indexOf("javascript")>=0)&&a.globalEval(g));return g}}}if(!this.length){b("ajaxSubmit: skipping submit process - no element selected");return this}typeof c=="function"&&(c={success:c});var d=this.attr("action"),e=typeof d=="string"?a.trim(d):"";e&&(e=(e.match(/^([^#]+)/)||[])[1]),e=e||window.location.href||"",c=a.extend(!0,{url:e,success:a.ajaxSettings.success,type:this[0].getAttribute("method")||"GET",iframeSrc:/^https/i.test(window.location.href||"")?"javascript:false":"about:blank"},c);var f={};this.trigger("form-pre-serialize",[this,c,f]);if(f.veto){b("ajaxSubmit: submit vetoed via form-pre-serialize trigger");return this}if(c.beforeSerialize&&c.beforeSerialize(this,c)===!1){b("ajaxSubmit: submit aborted via beforeSerialize callback");return this}var g,h,i=this.formToArray(c.semantic);if(c.data){c.extraData=c.data;for(g in c.data)if(c.data[g]instanceof Array)for(var j in c.data[g])i.push({name:g,value:c.data[g][j]});else h=c.data[g],h=a.isFunction(h)?h():h,i.push({name:g,value:h})}if(c.beforeSubmit&&c.beforeSubmit(i,this,c)===!1){b("ajaxSubmit: submit aborted via beforeSubmit callback");return this}this.trigger("form-submit-validate",[i,this,c,f]);if(f.veto){b("ajaxSubmit: submit vetoed via form-submit-validate trigger");return this}var k=a.param(i);c.type.toUpperCase()=="GET"?(c.url+=(c.url.indexOf("?")>=0?"&":"?")+k,c.data=null):c.data=k;var l=this,m=[];c.resetForm&&m.push(function(){l.resetForm()}),c.clearForm&&m.push(function(){l.clearForm()});if(!c.dataType&&c.target){var n=c.success||function(){};m.push(function(b){var d=c.replaceTarget?"replaceWith":"html";a(c.target)[d](b).each(n,arguments)})}else c.success&&m.push(c.success);c.success=function(a,b,d){var e=c.context||c;for(var f=0,g=m.length;f<g;f++)m[f].apply(e,[a,b,d||l,l])};var o=a("input:file",this).length>0,p="multipart/form-data",q=l.attr("enctype")==p||l.attr("encoding")==p;c.iframe!==!1&&(o||c.iframe||q)?c.closeKeepAlive?a.get(c.closeKeepAlive,r):r():a.ajax(c),this.trigger("form-submit-notify",[this,c]);return this},a.fn.ajaxForm=function(c){if(this.length===0){var d={s:this.selector,c:this.context};if(!a.isReady&&d.s){b("DOM not ready, queuing ajaxForm"),a(function(){a(d.s,d.c).ajaxForm(c)});return this}b("terminating; zero elements found by selector"+(a.isReady?"":" (DOM not ready)"));return this}return this.ajaxFormUnbind().bind("submit.form-plugin",function(b){b.isDefaultPrevented()||(b.preventDefault(),a(this).ajaxSubmit(c))}).bind("click.form-plugin",function(b){var c=b.target,d=a(c);if(!d.is(":submit,input:image")){var e=d.closest(":submit");if(e.length==0)return;c=e[0]}var f=this;f.clk=c;if(c.type=="image")if(b.offsetX!=undefined)f.clk_x=b.offsetX,f.clk_y=b.offsetY;else if(typeof a.fn.offset=="function"){var g=d.offset();f.clk_x=b.pageX-g.left,f.clk_y=b.pageY-g.top}else f.clk_x=b.pageX-c.offsetLeft,f.clk_y=b.pageY-c.offsetTop;setTimeout(function(){f.clk=f.clk_x=f.clk_y=null},100)})},a.fn.ajaxFormUnbind=function(){return this.unbind("submit.form-plugin click.form-plugin")},a.fn.formToArray=function(b){var c=[];if(this.length===0)return c;var d=this[0],e=b?d.getElementsByTagName("*"):d.elements;if(!e)return c;var f,g,h,i,j,k,l;for(f=0,k=e.length;f<k;f++){j=e[f],h=j.name;if(!h)continue;if(b&&d.clk&&j.type=="image"){!j.disabled&&d.clk==j&&(c.push({name:h,value:a(j).val()}),c.push({name:h+".x",value:d.clk_x},{name:h+".y",value:d.clk_y}));continue}i=a.fieldValue(j,!0);if(i&&i.constructor==Array)for(g=0,l=i.length;g<l;g++)c.push({name:h,value:i[g]});else i!==null&&typeof i!="undefined"&&c.push({name:h,value:i})}if(!b&&d.clk){var m=a(d.clk),n=m[0];h=n.name,h&&!n.disabled&&n.type=="image"&&(c.push({name:h,value:m.val()}),c.push({name:h+".x",value:d.clk_x},{name:h+".y",value:d.clk_y}))}return c},a.fn.formSerialize=function(b){return a.param(this.formToArray(b))},a.fn.fieldSerialize=function(b){var c=[];this.each(function(){var d=this.name;if(!!d){var e=a.fieldValue(this,b);if(e&&e.constructor==Array)for(var f=0,g=e.length;f<g;f++)c.push({name:d,value:e[f]});else e!==null&&typeof e!="undefined"&&c.push({name:this.name,value:e})}});return a.param(c)},a.fn.fieldValue=function(b){for(var c=[],d=0,e=this.length;d<e;d++){var f=this[d],g=a.fieldValue(f,b);if(g===null||typeof g=="undefined"||g.constructor==Array&&!g.length)continue;g.constructor==Array?a.merge(c,g):c.push(g)}return c},a.fieldValue=function(b,c){var d=b.name,e=b.type,f=b.tagName.toLowerCase();c===undefined&&(c=!0);if(c&&(!d||b.disabled||e=="reset"||e=="button"||(e=="checkbox"||e=="radio")&&!b.checked||(e=="submit"||e=="image")&&b.form&&b.form.clk!=b||f=="select"&&b.selectedIndex==-1))return null;if(f=="select"){var g=b.selectedIndex;if(g<0)return null;var h=[],i=b.options,j=e=="select-one",k=j?g+1:i.length;for(var l=j?g:0;l<k;l++){var m=i[l];if(m.selected){var n=m.value;n||(n=m.attributes&&m.attributes.value&&!m.attributes.value.specified?m.text:m.value);if(j)return n;h.push(n)}}return h}return a(b).val()},a.fn.clearForm=function(){return this.each(function(){a("input,select,textarea",this).clearFields()})},a.fn.clearFields=a.fn.clearInputs=function(){return this.each(function(){var a=this.type,b=this.tagName.toLowerCase();a=="text"||a=="password"||b=="textarea"?this.value="":a=="checkbox"||a=="radio"?this.checked=!1:b=="select"&&(this.selectedIndex=-1)})},a.fn.resetForm=function(){return this.each(function(){(typeof this.reset=="function"||typeof this.reset=="object"&&!this.reset.nodeType)&&this.reset()})},a.fn.enable=function(a){a===undefined&&(a=!0);return this.each(function(){this.disabled=!a})},a.fn.selected=function(b){b===undefined&&(b=!0);return this.each(function(){var c=this.type;if(c=="checkbox"||c=="radio")this.checked=b;else if(this.tagName.toLowerCase()=="option"){var d=a(this).parent("select");b&&d[0]&&d[0].type=="select-one"&&d.find("option").selected(!1),this.selected=b}})}})(jQuery);/**//* * jQuery BBQ: Back Button & Query Library - v1.2.1 - 2/17/2010 * http://benalman.com/projects/jquery-bbq-plugin/ * * Copyright (c) 2010 "Cowboy" Ben Alman * Dual licensed under the MIT and GPL licenses. * http://benalman.com/about/license/ */(function($,p){var i,m=Array.prototype.slice,r=decodeURIComponent,a=$.param,c,l,v,b=$.bbq=$.bbq||{},q,u,j,e=$.event.special,d="hashchange",A="querystring",D="fragment",y="elemUrlAttr",g="location",k="href",t="src",x=/^.*\?|#.*$/g,w=/^.*\#/,h,C={};function E(F){return typeof F==="string"}function B(G){var F=m.call(arguments,1);return function(){return G.apply(this,F.concat(m.call(arguments)))}}function n(F){return F.replace(/^[^#]*#?(.*)$/,"$1")}function o(F){return F.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/,"$1")}function f(H,M,F,I,G){var O,L,K,N,J;if(I!==i){K=F.match(H?/^([^#]*)\#?(.*)$/:/^([^#?]*)\??([^#]*)(#?.*)/);J=K[3]||"";if(G===2&&E(I)){L=I.replace(H?w:x,"")}else{N=l(K[2]);I=E(I)?l[H?D:A](I):I;L=G===2?I:G===1?$.extend({},I,N):$.extend({},N,I);L=a(L);if(H){L=L.replace(h,r)}}O=K[1]+(H?"#":L||!K[1]?"?":"")+L+J}else{O=M(F!==i?F:p[g][k])}return O}a[A]=B(f,0,o);a[D]=c=B(f,1,n);c.noEscape=function(G){G=G||"";var F=$.map(G.split(""),encodeURIComponent);h=new RegExp(F.join("|"),"g")};c.noEscape(",/");$.deparam=l=function(I,F){var H={},G={"true":!0,"false":!1,"null":null};$.each(I.replace(/\+/g," ").split("&"),function(L,Q){var K=Q.split("="),P=r(K[0]),J,O=H,M=0,R=P.split("]["),N=R.length-1;if(/\[/.test(R[0])&&/\]$/.test(R[N])){R[N]=R[N].replace(/\]$/,"");R=R.shift().split("[").concat(R);N=R.length-1}else{N=0}if(K.length===2){J=r(K[1]);if(F){J=J&&!isNaN(J)?+J:J==="undefined"?i:G[J]!==i?G[J]:J}if(N){for(;M<=N;M++){P=R[M]===""?O.length:R[M];O=O[P]=M<N?O[P]||(R[M+1]&&isNaN(R[M+1])?{}:[]):J}}else{if($.isArray(H[P])){H[P].push(J)}else{if(H[P]!==i){H[P]=[H[P],J]}else{H[P]=J}}}}else{if(P){H[P]=F?i:""}}});return H};function z(H,F,G){if(F===i||typeof F==="boolean"){G=F;F=a[H?D:A]()}else{F=E(F)?F.replace(H?w:x,""):F}return l(F,G)}l[A]=B(z,0);l[D]=v=B(z,1);$[y]||($[y]=function(F){return $.extend(C,F)})({a:k,base:k,iframe:t,img:t,input:t,form:"action",link:k,script:t});j=$[y];function s(I,G,H,F){if(!E(H)&&typeof H!=="object"){F=H;H=G;G=i}return this.each(function(){var L=$(this),J=G||j()[(this.nodeName||"").toLowerCase()]||"",K=J&&L.attr(J)||"";L.attr(J,a[I](K,H,F))})}$.fn[A]=B(s,A);$.fn[D]=B(s,D);b.pushState=q=function(I,F){if(E(I)&&/^#/.test(I)&&F===i){F=2}var H=I!==i,G=c(p[g][k],H?I:{},H?F:2);p[g][k]=G+(/#/.test(G)?"":"#")};b.getState=u=function(F,G){return F===i||typeof F==="boolean"?v(F):v(G)[F]};b.removeState=function(F){var G={};if(F!==i){G=u();$.each($.isArray(F)?F:arguments,function(I,H){delete G[H]})}q(G,2)};e[d]=$.extend(e[d],{add:function(F){var H;function G(J){var I=J[D]=c();J.getState=function(K,L){return K===i||typeof K==="boolean"?l(I,K):l(I,L)[K]};H.apply(this,arguments)}if($.isFunction(F)){H=F;return G}else{H=F.handler;F.handler=G}}})})(jQuery,this);/* * jQuery hashchange event - v1.2 - 2/11/2010 * http://benalman.com/projects/jquery-hashchange-plugin/ * * Copyright (c) 2010 "Cowboy" Ben Alman * Dual licensed under the MIT and GPL licenses. * http://benalman.com/about/license/ */(function($,i,b){var j,k=$.event.special,c="location",d="hashchange",l="href",f=$.browser,g=document.documentMode,h=f.msie&&(g===b||g<8),e="on"+d in i&&!h;function a(m){m=m||i[c][l];return m.replace(/^[^#]*#?(.*)$/,"$1")}$[d+"Delay"]=100;k[d]=$.extend(k[d],{setup:function(){if(e){return false}$(j.start)},teardown:function(){if(e){return false}$(j.stop)}});j=(function(){var m={},r,n,o,q;function p(){o=q=function(s){return s};if(h){n=$('<iframe src="javascript:0"/>').hide().insertAfter("body")[0].contentWindow;q=function(){return a(n.document[c][l])};o=function(u,s){if(u!==s){var t=n.document;t.open().close();t[c].hash="#"+u}};o(a())}}m.start=function(){if(r){return}var t=a();o||p();(function s(){var v=a(),u=q(t);if(v!==t){o(t=v,u);$(i).trigger(d)}else{if(u!==t){i[c][l]=i[c][l].replace(/#.*/,"")+"#"+u}}r=setTimeout(s,$[d+"Delay"])})()};m.stop=function(){if(!n){r&&clearTimeout(r);r=0}};return m})()})(jQuery,this);;/**//** * @file * Attaches the behaviors for the Overlay parent pages. */(function ($) {/** * Open the overlay, or load content into it, when an admin link is clicked. */Drupal.behaviors.overlayParent = {  attach: function (context, settings) {    if (Drupal.overlay.isOpen) {      Drupal.overlay.makeDocumentUntabbable(context);    }    if (this.processed) {      return;    }    this.processed = true;    $(window)      // When the hash (URL fragment) changes, open the overlay if needed.      .bind('hashchange.drupal-overlay', $.proxy(Drupal.overlay, 'eventhandlerOperateByURLFragment'))      // Trigger the hashchange handler once, after the page is loaded, so that      // permalinks open the overlay.      .triggerHandler('hashchange.drupal-overlay');    $(document)      // Instead of binding a click event handler to every link we bind one to      // the document and only handle events that bubble up. This allows other      // scripts to bind their own handlers to links and also to prevent      // overlay's handling.      .bind('click.drupal-overlay mouseup.drupal-overlay', $.proxy(Drupal.overlay, 'eventhandlerOverrideLink'));  }};/** * Overlay object for parent windows. * * Events * Overlay triggers a number of events that can be used by other scripts. * - drupalOverlayOpen: This event is triggered when the overlay is opened. * - drupalOverlayBeforeClose: This event is triggered when the overlay attempts *   to close. If an event handler returns false, the close will be prevented. * - drupalOverlayClose: This event is triggered when the overlay is closed. * - drupalOverlayBeforeLoad: This event is triggered right before a new URL *   is loaded into the overlay. * - drupalOverlayReady: This event is triggered when the DOM of the overlay *   child document is fully loaded. * - drupalOverlayLoad: This event is triggered when the overlay is finished *   loading. * - drupalOverlayResize: This event is triggered when the overlay is being *   resized to match the parent window. */Drupal.overlay = Drupal.overlay || {  isOpen: false,  isOpening: false,  isClosing: false,  isLoading: false};Drupal.overlay.prototype = {};/** * Open the overlay. * * @param url *   The URL of the page to open in the overlay. * * @return *   TRUE if the overlay was opened, FALSE otherwise. */Drupal.overlay.open = function (url) {  // Just one overlay is allowed.  if (this.isOpen || this.isOpening) {    return this.load(url);  }  this.isOpening = true;  // Store the original document title.  this.originalTitle = document.title;  // Create the dialog and related DOM elements.  this.create();  this.isOpening = false;  this.isOpen = true;  $(document.documentElement).addClass('overlay-open');  this.makeDocumentUntabbable();  // Allow other scripts to respond to this event.  $(document).trigger('drupalOverlayOpen');  return this.load(url);};/** * Create the underlying markup and behaviors for the overlay. */Drupal.overlay.create = function () {  this.$container = $(Drupal.theme('overlayContainer'))    .appendTo(document.body);  // Overlay uses transparent iframes that cover the full parent window.  // When the overlay is open the scrollbar of the parent window is hidden.  // Because some browsers show a white iframe background for a short moment  // while loading a page into an iframe, overlay uses two iframes. By loading  // the page in a hidden (inactive) iframe the user doesn't see the white  // background. When the page is loaded the active and inactive iframes  // are switched.  this.activeFrame = this.$iframeA = $(Drupal.theme('overlayElement'))    .appendTo(this.$container);  this.inactiveFrame = this.$iframeB = $(Drupal.theme('overlayElement'))    .appendTo(this.$container);  this.$iframeA.bind('load.drupal-overlay', { self: this.$iframeA[0], sibling: this.$iframeB }, $.proxy(this, 'loadChild'));  this.$iframeB.bind('load.drupal-overlay', { self: this.$iframeB[0], sibling: this.$iframeA }, $.proxy(this, 'loadChild'));  // Add a second class "drupal-overlay-open" to indicate these event handlers  // should only be bound when the overlay is open.  var eventClass = '.drupal-overlay.drupal-overlay-open';  $(window)    .bind('resize' + eventClass, $.proxy(this, 'eventhandlerOuterResize'));  $(document)    .bind('drupalOverlayLoad' + eventClass, $.proxy(this, 'eventhandlerOuterResize'))    .bind('drupalOverlayReady' + eventClass +          ' drupalOverlayClose' + eventClass, $.proxy(this, 'eventhandlerSyncURLFragment'))    .bind('drupalOverlayClose' + eventClass, $.proxy(this, 'eventhandlerRefreshPage'))    .bind('drupalOverlayBeforeClose' + eventClass +          ' drupalOverlayBeforeLoad' + eventClass +          ' drupalOverlayResize' + eventClass, $.proxy(this, 'eventhandlerDispatchEvent'));  if ($('.overlay-displace-top, .overlay-displace-bottom').length) {    $(document)      .bind('drupalOverlayResize' + eventClass, $.proxy(this, 'eventhandlerAlterDisplacedElements'))      .bind('drupalOverlayClose' + eventClass, $.proxy(this, 'eventhandlerRestoreDisplacedElements'));  }};/** * Load the given URL into the overlay iframe. * * Use this method to change the URL being loaded in the overlay if it is * already open. * * @return *   TRUE if URL is loaded into the overlay, FALSE otherwise. */Drupal.overlay.load = function (url) {  if (!this.isOpen) {    return false;  }  // Allow other scripts to respond to this event.  $(document).trigger('drupalOverlayBeforeLoad');  $(document.documentElement).addClass('overlay-loading');  // The contentDocument property is not supported in IE until IE8.  var iframeDocument = this.inactiveFrame[0].contentDocument || this.inactiveFrame[0].contentWindow.document;  // location.replace doesn't create a history entry. location.href does.  // In this case, we want location.replace, as we're creating the history  // entry using URL fragments.  iframeDocument.location.replace(url);  return true;};/** * Close the overlay and remove markup related to it from the document. * * @return *   TRUE if the overlay was closed, FALSE otherwise. */Drupal.overlay.close = function () {  // Prevent double execution when close is requested more than once.  if (!this.isOpen || this.isClosing) {    return false;  }  // Allow other scripts to respond to this event.  var event = $.Event('drupalOverlayBeforeClose');  $(document).trigger(event);  // If a handler returned false, the close will be prevented.  if (event.isDefaultPrevented()) {    return false;  }  this.isClosing = true;  this.isOpen = false;  $(document.documentElement).removeClass('overlay-open');  // Restore the original document title.  document.title = this.originalTitle;  this.makeDocumentTabbable();  // Allow other scripts to respond to this event.  $(document).trigger('drupalOverlayClose');  // When the iframe is still loading don't destroy it immediately but after  // the content is loaded (see Drupal.overlay.loadChild).  if (!this.isLoading) {    this.destroy();    this.isClosing = false;  }  return true;};/** * Destroy the overlay. */Drupal.overlay.destroy = function () {  $([document, window]).unbind('.drupal-overlay-open');  this.$container.remove();  this.$container = null;  this.$iframeA = null;  this.$iframeB = null;  this.iframeWindow = null;};/** * Redirect the overlay parent window to the given URL. * * @param url *   Can be an absolute URL or a relative link to the domain root. */Drupal.overlay.redirect = function (url) {  // Create a native Link object, so we can use its object methods.  var link = $(url.link(url)).get(0);  // If the link is already open, force the hashchange event to simulate reload.  if (window.location.href == link.href) {    $(window).triggerHandler('hashchange.drupal-overlay');  }  window.location.href = link.href;  return true;};/** * Bind the child window. * * Note that this function is fired earlier than Drupal.overlay.loadChild. */Drupal.overlay.bindChild = function (iframeWindow, isClosing) {  this.iframeWindow = iframeWindow;  // We are done if the child window is closing.  if (isClosing || this.isClosing || !this.isOpen) {    return;  }  // Allow other scripts to respond to this event.  $(document).trigger('drupalOverlayReady');};/** * Event handler: load event handler for the overlay iframe. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: load *   - event.currentTarget: iframe */Drupal.overlay.loadChild = function (event) {  var iframe = event.data.self;  var iframeDocument = iframe.contentDocument || iframe.contentWindow.document;  var iframeWindow = iframeDocument.defaultView || iframeDocument.parentWindow;  if (iframeWindow.location == 'about:blank') {    return;  }  this.isLoading = false;  $(document.documentElement).removeClass('overlay-loading');  event.data.sibling.removeClass('overlay-active').attr({ 'tabindex': -1 });  // Only continue when overlay is still open and not closing.  if (this.isOpen && !this.isClosing) {    // And child document is an actual overlayChild.    if (iframeWindow.Drupal && iframeWindow.Drupal.overlayChild) {      // Replace the document title with title of iframe.      document.title = iframeWindow.document.title;      this.activeFrame = $(iframe)        .addClass('overlay-active')        // Add a title attribute to the iframe for accessibility.        .attr('title', Drupal.t('@title dialog', { '@title': iframeWindow.jQuery('#overlay-title').text() })).removeAttr('tabindex');      this.inactiveFrame = event.data.sibling;      // Load an empty document into the inactive iframe.      (this.inactiveFrame[0].contentDocument || this.inactiveFrame[0].contentWindow.document).location.replace('about:blank');      // Move the focus to just before the "skip to main content" link inside      // the overlay.      this.activeFrame.focus();      var skipLink = iframeWindow.jQuery('a:first');      Drupal.overlay.setFocusBefore(skipLink, iframeWindow.document);      // Allow other scripts to respond to this event.      $(document).trigger('drupalOverlayLoad');    }    else {      window.location = iframeWindow.location.href.replace(/([?&]?)render=overlay&?/g, '$1').replace(/\?$/, '');    }  }  else {    this.destroy();  }};/** * Creates a placeholder element to receive document focus. * * Setting the document focus to a link will make it visible, even if it's a * "skip to main content" link that should normally be visible only when the * user tabs to it. This function can be used to set the document focus to * just before such an invisible link. * * @param $element *   The jQuery element that should receive focus on the next tab press. * @param document *   The iframe window element to which the placeholder should be added. The *   placeholder element has to be created inside the same iframe as the element *   it precedes, to keep IE happy. (http://bugs.jquery.com/ticket/4059) */Drupal.overlay.setFocusBefore = function ($element, document) {  // Create an anchor inside the placeholder document.  var placeholder = document.createElement('a');  var $placeholder = $(placeholder).addClass('element-invisible').attr('href', '#');  // Put the placeholder where it belongs, and set the document focus to it.  $placeholder.insertBefore($element);  $placeholder.focus();  // Make the placeholder disappear as soon as it loses focus, so that it  // doesn't appear in the tab order again.  $placeholder.one('blur', function () {    $(this).remove();  });};/** * Check if the given link is in the administrative section of the site. * * @param url *   The URL to be tested. * * @return boolean *   TRUE if the URL represents an administrative link, FALSE otherwise. */Drupal.overlay.isAdminLink = function (url) {  if (!Drupal.urlIsLocal(url)) {    return false;  }  var path = this.getPath(url);  // Turn the list of administrative paths into a regular expression.  if (!this.adminPathRegExp) {    var prefix = '';    if (Drupal.settings.overlay.pathPrefixes.length) {      // Allow path prefixes used for language negatiation followed by slash,      // and the empty string.      prefix = '(' + Drupal.settings.overlay.pathPrefixes.join('/|') + '/|)';    }    var adminPaths = '^' + prefix + '(' + Drupal.settings.overlay.paths.admin.replace(/\s+/g, '|') + ')$';    var nonAdminPaths = '^' + prefix + '(' + Drupal.settings.overlay.paths.non_admin.replace(/\s+/g, '|') + ')$';    adminPaths = adminPaths.replace(/\*/g, '.*');    nonAdminPaths = nonAdminPaths.replace(/\*/g, '.*');    this.adminPathRegExp = new RegExp(adminPaths);    this.nonAdminPathRegExp = new RegExp(nonAdminPaths);  }  return this.adminPathRegExp.exec(path) && !this.nonAdminPathRegExp.exec(path);};/** * Determine whether a link is external to the site. * * Deprecated. Use Drupal.urlIsLocal() instead. * * @param url *   The URL to be tested. * * @return boolean *   TRUE if the URL is external to the site, FALSE otherwise. */Drupal.overlay.isExternalLink = function (url) {  return !Drupal.urlIsLocal(url);};/** * Constructs an internal URL (relative to this site) from the provided path. * * For example, if the provided path is 'admin' and the site is installed at * http://example.com/drupal, this function will return '/drupal/admin'. * * @param path *   The internal path, without any leading slash. * * @return *   The internal URL derived from the provided path, or null if a valid *   internal path cannot be constructed (for example, if an attempt to create *   an external link is detected). */Drupal.overlay.getInternalUrl = function (path) {  var url = Drupal.settings.basePath + path;  if (Drupal.urlIsLocal(url)) {    return url;  }};/** * Event handler: resizes overlay according to the size of the parent window. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: any *   - event.currentTarget: any */Drupal.overlay.eventhandlerOuterResize = function (event) {  // Proceed only if the overlay still exists.  if (!(this.isOpen || this.isOpening) || this.isClosing || !this.iframeWindow) {    return;  }  // IE6 uses position:absolute instead of position:fixed.  if (typeof document.body.style.maxHeight != 'string') {    this.activeFrame.height($(window).height());  }  // Allow other scripts to respond to this event.  $(document).trigger('drupalOverlayResize');};/** * Event handler: resizes displaced elements so they won't overlap the scrollbar * of overlay's iframe. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: any *   - event.currentTarget: any */Drupal.overlay.eventhandlerAlterDisplacedElements = function (event) {  // Proceed only if the overlay still exists.  if (!(this.isOpen || this.isOpening) || this.isClosing || !this.iframeWindow) {    return;  }  $(this.iframeWindow.document.body).css({    marginTop: Drupal.overlay.getDisplacement('top'),    marginBottom: Drupal.overlay.getDisplacement('bottom')  })  // IE7 isn't reflowing the document immediately.  // @todo This might be fixed in a cleaner way.  .addClass('overlay-trigger-reflow').removeClass('overlay-trigger-reflow');  var documentHeight = this.iframeWindow.document.body.clientHeight;  var documentWidth = this.iframeWindow.document.body.clientWidth;  // IE6 doesn't support maxWidth, use width instead.  var maxWidthName = (typeof document.body.style.maxWidth == 'string') ? 'maxWidth' : 'width';  if (Drupal.overlay.leftSidedScrollbarOffset === undefined && $(document.documentElement).attr('dir') === 'rtl') {    // We can't use element.clientLeft to detect whether scrollbars are placed    // on the left side of the element when direction is set to "rtl" as most    // browsers dont't support it correctly.    // http://www.gtalbot.org/BugzillaSection/DocumentAllDHTMLproperties.html    // There seems to be absolutely no way to detect whether the scrollbar    // is on the left side in Opera; always expect scrollbar to be on the left.    if ($.browser.opera) {      Drupal.overlay.leftSidedScrollbarOffset = document.documentElement.clientWidth - this.iframeWindow.document.documentElement.clientWidth + this.iframeWindow.document.documentElement.clientLeft;    }    else if (this.iframeWindow.document.documentElement.clientLeft) {      Drupal.overlay.leftSidedScrollbarOffset = this.iframeWindow.document.documentElement.clientLeft;    }    else {      var el1 = $('<div style="direction: rtl; overflow: scroll;"></div>').appendTo(document.body);      var el2 = $('<div></div>').appendTo(el1);      Drupal.overlay.leftSidedScrollbarOffset = parseInt(el2[0].offsetLeft - el1[0].offsetLeft);      el1.remove();    }  }  // Consider any element that should be visible above the overlay (such as  // a toolbar).  $('.overlay-displace-top, .overlay-displace-bottom').each(function () {    var data = $(this).data();    var maxWidth = documentWidth;    // In IE, Shadow filter makes element to overlap the scrollbar with 1px.    if (this.filters && this.filters.length && this.filters.item('DXImageTransform.Microsoft.Shadow')) {      maxWidth -= 1;    }    if (Drupal.overlay.leftSidedScrollbarOffset) {      $(this).css('left', Drupal.overlay.leftSidedScrollbarOffset);    }    // Prevent displaced elements overlapping window's scrollbar.    var currentMaxWidth = parseInt($(this).css(maxWidthName));    if ((data.drupalOverlay && data.drupalOverlay.maxWidth) || isNaN(currentMaxWidth) || currentMaxWidth > maxWidth || currentMaxWidth <= 0) {      $(this).css(maxWidthName, maxWidth);      (data.drupalOverlay = data.drupalOverlay || {}).maxWidth = true;    }    // Use a more rigorous approach if the displaced element still overlaps    // window's scrollbar; clip the element on the right.    var offset = $(this).offset();    var offsetRight = offset.left + $(this).outerWidth();    if ((data.drupalOverlay && data.drupalOverlay.clip) || offsetRight > maxWidth) {      if (Drupal.overlay.leftSidedScrollbarOffset) {        $(this).css('clip', 'rect(auto, auto, ' + (documentHeight - offset.top) + 'px, ' + (Drupal.overlay.leftSidedScrollbarOffset + 2) + 'px)');      }      else {        $(this).css('clip', 'rect(auto, ' + (maxWidth - offset.left) + 'px, ' + (documentHeight - offset.top) + 'px, auto)');      }      (data.drupalOverlay = data.drupalOverlay || {}).clip = true;    }  });};/** * Event handler: restores size of displaced elements as they were before * overlay was opened. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: any *   - event.currentTarget: any */Drupal.overlay.eventhandlerRestoreDisplacedElements = function (event) {  var $displacedElements = $('.overlay-displace-top, .overlay-displace-bottom');  try {    $displacedElements.css({ maxWidth: '', clip: '' });  }  // IE bug that doesn't allow unsetting style.clip (http://dev.jquery.com/ticket/6512).  catch (err) {    $displacedElements.attr('style', function (index, attr) {      return attr.replace(/clip\s*:\s*rect\([^)]+\);?/i, '');    });  }};/** * Event handler: overrides href of administrative links to be opened in * the overlay. * * This click event handler should be bound to any document (for example the * overlay iframe) of which you want links to open in the overlay. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: click, mouseup *   - event.currentTarget: document * * @see Drupal.overlayChild.behaviors.addClickHandler */Drupal.overlay.eventhandlerOverrideLink = function (event) {  // In some browsers the click event isn't fired for right-clicks. Use the  // mouseup event for right-clicks and the click event for everything else.  if ((event.type == 'click' && event.button == 2) || (event.type == 'mouseup' && event.button != 2)) {    return;  }  var $target = $(event.target);  // Only continue if clicked target (or one of its parents) is a link.  if (!$target.is('a')) {    $target = $target.closest('a');    if (!$target.length) {      return;    }  }  // Never open links in the overlay that contain the overlay-exclude class.  if ($target.hasClass('overlay-exclude')) {    return;  }  // Close the overlay when the link contains the overlay-close class.  if ($target.hasClass('overlay-close')) {    // Clearing the overlay URL fragment will close the overlay.    $.bbq.removeState('overlay');    return;  }  var target = $target[0];  var href = target.href;  // Only handle links that have an href attribute and use the HTTP(S) protocol.  if (href != undefined && href != '' && target.protocol.match(/^https?\:/)) {    var anchor = href.replace(target.ownerDocument.location.href, '');    // Skip anchor links.    if (anchor.length == 0 || anchor.charAt(0) == '#') {      return;    }    // Open admin links in the overlay.    else if (this.isAdminLink(href)) {      // If the link contains the overlay-restore class and the overlay-context      // state is set, also update the parent window's location.      var parentLocation = ($target.hasClass('overlay-restore') && typeof $.bbq.getState('overlay-context') == 'string')        ? this.getInternalUrl($.bbq.getState('overlay-context'))        : null;      href = this.fragmentizeLink($target.get(0), parentLocation);      // Only override default behavior when left-clicking and user is not      // pressing the ALT, CTRL, META (Command key on the Macintosh keyboard)      // or SHIFT key.      if (event.button == 0 && !event.altKey && !event.ctrlKey && !event.metaKey && !event.shiftKey) {        // Redirect to a fragmentized href. This will trigger a hashchange event.        this.redirect(href);        // Prevent default action and further propagation of the event.        return false;      }      // Otherwise alter clicked link's href. This is being picked up by      // the default action handler.      else {        $target          // Restore link's href attribute on blur or next click.          .one('blur mousedown', { target: target, href: target.href }, function (event) { $(event.data.target).attr('href', event.data.href); })          .attr('href', href);      }    }    // Non-admin links should close the overlay and open in the main window,    // which is the default action for a link. We only need to handle them    // if the overlay is open and the clicked link is inside the overlay iframe.    else if (this.isOpen && target.ownerDocument === this.iframeWindow.document) {      // Open external links in the immediate parent of the frame, unless the      // link already has a different target.      if (target.hostname != window.location.hostname) {        if (!$target.attr('target')) {          $target.attr('target', '_parent');        }      }      else {        // Add the overlay-context state to the link, so "overlay-restore" links        // can restore the context.        if ($target[0].hash) {          // Leave links with an existing fragment alone. Adding an extra          // parameter to a link like "node/1#section-1" breaks the link.        }        else {          // For links with no existing fragment, add the overlay context.          $target.attr('href', $.param.fragment(href, { 'overlay-context': this.getPath(window.location) + window.location.search }));        }        // When the link has a destination query parameter and that destination        // is an admin link we need to fragmentize it. This will make it reopen        // in the overlay.        var params = $.deparam.querystring(href);        if (params.destination && this.isAdminLink(params.destination)) {          var fragmentizedDestination = $.param.fragment(this.getPath(window.location), { overlay: params.destination });          $target.attr('href', $.param.querystring(href, { destination: fragmentizedDestination }));        }        // Make the link open in the immediate parent of the frame, unless the        // link already has a different target.        if (!$target.attr('target')) {          $target.attr('target', '_parent');        }      }    }  }};/** * Event handler: opens or closes the overlay based on the current URL fragment. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: hashchange *   - event.currentTarget: document */Drupal.overlay.eventhandlerOperateByURLFragment = function (event) {  // If we changed the hash to reflect an internal redirect in the overlay,  // its location has already been changed, so don't do anything.  if ($.data(window.location, window.location.href) === 'redirect') {    $.data(window.location, window.location.href, null);    return;  }  // Get the overlay URL from the current URL fragment.  var internalUrl = null;  var state = $.bbq.getState('overlay');  if (state) {    internalUrl = this.getInternalUrl(state);  }  if (internalUrl) {    // Append render variable, so the server side can choose the right    // rendering and add child frame code to the page if needed.    var url = $.param.querystring(internalUrl, { render: 'overlay' });    this.open(url);    this.resetActiveClass(this.getPath(Drupal.settings.basePath + state));  }  // If there is no overlay URL in the fragment and the overlay is (still)  // open, close the overlay.  else if (this.isOpen && !this.isClosing) {    this.close();    this.resetActiveClass(this.getPath(window.location));  }};/** * Event handler: makes sure the internal overlay URL is reflected in the parent * URL fragment. * * Normally the parent URL fragment determines the overlay location. However, if * the overlay redirects internally, the parent doesn't get informed, and the * parent URL fragment will be out of date. This is a sanity check to make * sure we're in the right place. * * The parent URL fragment is also not updated automatically when overlay's * open, close or load functions are used directly (instead of through * eventhandlerOperateByURLFragment). * * @param event *   Event being triggered, with the following restrictions: *   - event.type: drupalOverlayReady, drupalOverlayClose *   - event.currentTarget: document */Drupal.overlay.eventhandlerSyncURLFragment = function (event) {  if (this.isOpen) {    var expected = $.bbq.getState('overlay');    // This is just a sanity check, so we're comparing paths, not query strings.    if (this.getPath(Drupal.settings.basePath + expected) != this.getPath(this.iframeWindow.document.location)) {      // There may have been a redirect inside the child overlay window that the      // parent wasn't aware of. Update the parent URL fragment appropriately.      var newLocation = Drupal.overlay.fragmentizeLink(this.iframeWindow.document.location);      // Set a 'redirect' flag on the new location so the hashchange event handler      // knows not to change the overlay's content.      $.data(window.location, newLocation, 'redirect');      // Use location.replace() so we don't create an extra history entry.      window.location.replace(newLocation);    }  }  else {    $.bbq.removeState('overlay');  }};/** * Event handler: if the child window suggested that the parent refresh on * close, force a page refresh. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: drupalOverlayClose *   - event.currentTarget: document */Drupal.overlay.eventhandlerRefreshPage = function (event) {  if (Drupal.overlay.refreshPage) {    window.location.reload(true);  }};/** * Event handler: dispatches events to the overlay document. * * @param event *   Event being triggered, with the following restrictions: *   - event.type: any *   - event.currentTarget: any */Drupal.overlay.eventhandlerDispatchEvent = function (event) {  if (this.iframeWindow && this.iframeWindow.document) {    this.iframeWindow.jQuery(this.iframeWindow.document).trigger(event);  }};/** * Make a regular admin link into a URL that will trigger the overlay to open. * * @param link *   A JavaScript Link object (i.e. an <a> element). * @param parentLocation *   (optional) URL to override the parent window's location with. * * @return *   A URL that will trigger the overlay (in the form *   /node/1#overlay=admin/config). */Drupal.overlay.fragmentizeLink = function (link, parentLocation) {  // Don't operate on links that are already overlay-ready.  var params = $.deparam.fragment(link.href);  if (params.overlay) {    return link.href;  }  // Determine the link's original destination. Set ignorePathFromQueryString to  // true to prevent transforming this link into a clean URL while clean URLs  // may be disabled.  var path = this.getPath(link, true);  // Preserve existing query and fragment parameters in the URL, except for  // "render=overlay" which is re-added in Drupal.overlay.eventhandlerOperateByURLFragment.  var destination = path + link.search.replace(/&?render=overlay/, '').replace(/\?$/, '') + link.hash;  // Assemble and return the overlay-ready link.  return $.param.fragment(parentLocation || window.location.href, { overlay: destination });};/** * Refresh any regions of the page that are displayed outside the overlay. * * @param data *   An array of objects with information on the page regions to be refreshed. *   For each object, the key is a CSS class identifying the region to be *   refreshed, and the value represents the section of the Drupal $page array *   corresponding to this region. */Drupal.overlay.refreshRegions = function (data) {  $.each(data, function () {    var region_info = this;    $.each(region_info, function (regionClass) {      var regionName = region_info[regionClass];      var regionSelector = '.' + regionClass;      // Allow special behaviors to detach.      Drupal.detachBehaviors($(regionSelector));      $.get(Drupal.settings.basePath + Drupal.settings.overlay.ajaxCallback + '/' + regionName, function (newElement) {        $(regionSelector).replaceWith($(newElement));        Drupal.attachBehaviors($(regionSelector), Drupal.settings);      });    });  });};/** * Reset the active class on links in displaced elements according to * given path. * * @param activePath *   Path to match links against. */Drupal.overlay.resetActiveClass = function(activePath) {  var self = this;  var windowDomain = window.location.protocol + window.location.hostname;  $('.overlay-displace-top, .overlay-displace-bottom')  .find('a[href]')  // Remove active class from all links in displaced elements.  .removeClass('active')  // Add active class to links that match activePath.  .each(function () {    var linkDomain = this.protocol + this.hostname;    var linkPath = self.getPath(this);    // A link matches if it is part of the active trail of activePath, except    // for frontpage links.    if (linkDomain == windowDomain && (activePath + '/').indexOf(linkPath + '/') === 0 && (linkPath !== '' || activePath === '')) {      $(this).addClass('active');    }  });};/** * Helper function to get the (corrected) Drupal path of a link. * * @param link *   Link object or string to get the Drupal path from. * @param ignorePathFromQueryString *   Boolean whether to ignore path from query string if path appears empty. * * @return *   The Drupal path. */Drupal.overlay.getPath = function (link, ignorePathFromQueryString) {  if (typeof link == 'string') {    // Create a native Link object, so we can use its object methods.    link = $(link.link(link)).get(0);  }  var path = link.pathname;  // Ensure a leading slash on the path, omitted in some browsers.  if (path.charAt(0) != '/') {    path = '/' + path;  }  path = path.replace(new RegExp(Drupal.settings.basePath + '(?:index.php)?'), '');  if (path == '' && !ignorePathFromQueryString) {    // If the path appears empty, it might mean the path is represented in the    // query string (clean URLs are not used).    var match = new RegExp('([?&])q=(.+)([&#]|$)').exec(link.search);    if (match && match.length == 4) {      path = match[2];    }  }  return path;};/** * Get the total displacement of given region. * * @param region *   Region name. Either "top" or "bottom". * * @return *   The total displacement of given region in pixels. */Drupal.overlay.getDisplacement = function (region) {  var displacement = 0;  var lastDisplaced = $('.overlay-displace-' + region + ':last');  if (lastDisplaced.length) {    displacement = lastDisplaced.offset().top + lastDisplaced.outerHeight();    // In modern browsers (including IE9), when box-shadow is defined, use the    // normal height.    var cssBoxShadowValue = lastDisplaced.css('box-shadow');    var boxShadow = (typeof cssBoxShadowValue !== 'undefined' && cssBoxShadowValue !== 'none');    // In IE8 and below, we use the shadow filter to apply box-shadow styles to    // the toolbar. It adds some extra height that we need to remove.    if (!boxShadow && /DXImageTransform\.Microsoft\.Shadow/.test(lastDisplaced.css('filter'))) {      displacement -= lastDisplaced[0].filters.item('DXImageTransform.Microsoft.Shadow').strength;      displacement = Math.max(0, displacement);    }  }  return displacement;};/** * Makes elements outside the overlay unreachable via the tab key. * * @param context *   The part of the DOM that should have its tabindexes changed. Defaults to *   the entire page. */Drupal.overlay.makeDocumentUntabbable = function (context) {  // Manipulating tabindexes for the entire document is unacceptably slow in IE6  // and IE7, so in those browsers, the underlying page will still be reachable  // via the tab key. However, we still make the links within the Disable  // message unreachable, because the same message also exists within the  // child document. The duplicate copy in the underlying document is only for  // assisting screen-reader users navigating the document with reading commands  // that follow markup order rather than tab order.  if (jQuery.browser.msie && parseInt(jQuery.browser.version, 10) < 8) {    $('#overlay-disable-message a', context).attr('tabindex', -1);    return;  }  context = context || document.body;  var $overlay, $tabbable, $hasTabindex;  // Determine which elements on the page already have a tabindex.  $hasTabindex = $('[tabindex] :not(.overlay-element)', context);  // Record the tabindex for each element, so we can restore it later.  $hasTabindex.each(Drupal.overlay._recordTabindex);  // Add the tabbable elements from the current context to any that we might  // have previously recorded.  Drupal.overlay._hasTabindex = $hasTabindex.add(Drupal.overlay._hasTabindex);  // Set tabindex to -1 on everything outside the overlay and toolbars, so that  // the underlying page is unreachable.  // By default, browsers make a, area, button, input, object, select, textarea,  // and iframe elements reachable via the tab key.  $tabbable = $('a, area, button, input, object, select, textarea, iframe');  // If another element (like a div) has a tabindex, it's also tabbable.  $tabbable = $tabbable.add($hasTabindex);  // Leave links inside the overlay and toolbars alone.  $overlay = $('.overlay-element, #overlay-container, .overlay-displace-top, .overlay-displace-bottom').find('*');  $tabbable = $tabbable.not($overlay);  // We now have a list of everything in the underlying document that could  // possibly be reachable via the tab key. Make it all unreachable.  $tabbable.attr('tabindex', -1);};/** * Restores the original tabindex value of a group of elements. * * @param context *   The part of the DOM that should have its tabindexes restored. Defaults to *   the entire page. */Drupal.overlay.makeDocumentTabbable = function (context) {  // Manipulating tabindexes is unacceptably slow in IE6 and IE7. In those  // browsers, the underlying page was never made unreachable via tab, so  // there is no work to be done here.  if (jQuery.browser.msie && parseInt(jQuery.browser.version, 10) < 8) {    return;  }  var $needsTabindex;  context = context || document.body;  // Make the underlying document tabbable again by removing all existing  // tabindex attributes.  var $tabindex = $('[tabindex]', context);  if (jQuery.browser.msie && parseInt(jQuery.browser.version, 10) < 8) {    // removeAttr('tabindex') is broken in IE6-7, but the DOM function    // removeAttribute works.    var i;    var length = $tabindex.length;    for (i = 0; i < length; i++) {      $tabindex[i].removeAttribute('tabIndex');    }  }  else {    $tabindex.removeAttr('tabindex');  }  // Restore the tabindex attributes that existed before the overlay was opened.  $needsTabindex = $(Drupal.overlay._hasTabindex, context);  $needsTabindex.each(Drupal.overlay._restoreTabindex);  Drupal.overlay._hasTabindex = Drupal.overlay._hasTabindex.not($needsTabindex);};/** * Record the tabindex for an element, using $.data. * * Meant to be used as a jQuery.fn.each callback. */Drupal.overlay._recordTabindex = function () {  var $element = $(this);  var tabindex = $(this).attr('tabindex');  $element.data('drupalOverlayOriginalTabIndex', tabindex);};/** * Restore an element's original tabindex. * * Meant to be used as a jQuery.fn.each callback. */Drupal.overlay._restoreTabindex = function () {  var $element = $(this);  var tabindex = $element.data('drupalOverlayOriginalTabIndex');  $element.attr('tabindex', tabindex);};/** * Theme function to create the overlay iframe element. */Drupal.theme.prototype.overlayContainer = function () {  return '<div id="overlay-container"><div class="overlay-modal-background"></div></div>';};/** * Theme function to create an overlay iframe element. */Drupal.theme.prototype.overlayElement = function (url) {  return '<iframe class="overlay-element" frameborder="0" scrolling="auto" allowtransparency="true"></iframe>';};})(jQuery);;/**/(function ($) {  Drupal.viewsSlideshow = Drupal.viewsSlideshow || {};  /**   * Views Slideshow Controls   */  Drupal.viewsSlideshowControls = Drupal.viewsSlideshowControls || {};  /**   * Implement the play hook for controls.   */  Drupal.viewsSlideshowControls.play = function (options) {    // Route the control call to the correct control type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type].play == 'function') {        Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type].play(options);      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type].play == 'function') {        Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type].play(options);      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Implement the pause hook for controls.   */  Drupal.viewsSlideshowControls.pause = function (options) {    // Route the control call to the correct control type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type].pause == 'function') {        Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].top.type].pause(options);      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type].pause == 'function') {        Drupal[Drupal.settings.viewsSlideshowControls[options.slideshowID].bottom.type].pause(options);      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Views Slideshow Text Controls   */  // Add views slideshow api calls for views slideshow text controls.  Drupal.behaviors.viewsSlideshowControlsText = {    attach: function (context) {      // Process previous link      $('.views_slideshow_controls_text_previous:not(.views-slideshow-controls-text-previous-processed)', context).addClass('views-slideshow-controls-text-previous-processed').each(function() {        var uniqueID = $(this).attr('id').replace('views_slideshow_controls_text_previous_', '');        $(this).click(function() {          Drupal.viewsSlideshow.action({ "action": 'previousSlide', "slideshowID": uniqueID });          return false;        });      });      // Process next link      $('.views_slideshow_controls_text_next:not(.views-slideshow-controls-text-next-processed)', context).addClass('views-slideshow-controls-text-next-processed').each(function() {        var uniqueID = $(this).attr('id').replace('views_slideshow_controls_text_next_', '');        $(this).click(function() {          Drupal.viewsSlideshow.action({ "action": 'nextSlide', "slideshowID": uniqueID });          return false;        });      });      // Process pause link      $('.views_slideshow_controls_text_pause:not(.views-slideshow-controls-text-pause-processed)', context).addClass('views-slideshow-controls-text-pause-processed').each(function() {        var uniqueID = $(this).attr('id').replace('views_slideshow_controls_text_pause_', '');        $(this).click(function() {          if (Drupal.settings.viewsSlideshow[uniqueID].paused) {            Drupal.viewsSlideshow.action({ "action": 'play', "slideshowID": uniqueID, "force": true });          }          else {            Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": uniqueID, "force": true });          }          return false;        });      });    }  };  Drupal.viewsSlideshowControlsText = Drupal.viewsSlideshowControlsText || {};  /**   * Implement the pause hook for text controls.   */  Drupal.viewsSlideshowControlsText.pause = function (options) {    var pauseText = Drupal.theme.prototype['viewsSlideshowControlsPause'] ? Drupal.theme('viewsSlideshowControlsPause') : '';    $('#views_slideshow_controls_text_pause_' + options.slideshowID + ' a').text(pauseText);    $('#views_slideshow_controls_text_pause_' + options.slideshowID).removeClass('views-slideshow-controls-text-status-play');    $('#views_slideshow_controls_text_pause_' + options.slideshowID).addClass('views-slideshow-controls-text-status-pause');  };  /**   * Implement the play hook for text controls.   */  Drupal.viewsSlideshowControlsText.play = function (options) {    var playText = Drupal.theme.prototype['viewsSlideshowControlsPlay'] ? Drupal.theme('viewsSlideshowControlsPlay') : '';    $('#views_slideshow_controls_text_pause_' + options.slideshowID + ' a').text(playText);    $('#views_slideshow_controls_text_pause_' + options.slideshowID).removeClass('views-slideshow-controls-text-status-pause');    $('#views_slideshow_controls_text_pause_' + options.slideshowID).addClass('views-slideshow-controls-text-status-play');  };  // Theme the resume control.  Drupal.theme.prototype.viewsSlideshowControlsPause = function () {    return Drupal.t('Resume');  };  // Theme the pause control.  Drupal.theme.prototype.viewsSlideshowControlsPlay = function () {    return Drupal.t('Pause');  };  /**   * Views Slideshow Pager   */  Drupal.viewsSlideshowPager = Drupal.viewsSlideshowPager || {};  /**   * Implement the transitionBegin hook for pagers.   */  Drupal.viewsSlideshowPager.transitionBegin = function (options) {    // Route the pager call to the correct pager type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowPager != "undefined" && typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].transitionBegin == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].transitionBegin(options);        if (Drupal.settings.viewsSlideshowPager[options.slideshowID].top.master_pager === 1) {          $.each(Drupal.settings.viewsSlideshow, function(i, obj) {            if (i != options.slideshowID) {              options.slideshowID = i;              options.action = 'goToSlide';              Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].goToSlide(options);            }          });        }      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowPager != "undefined" && typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].transitionBegin == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].transitionBegin(options);        if (Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.master_pager === 1) {          $.each(Drupal.settings.viewsSlideshow, function(i, obj) {            if (i != options.slideshowID) {              options.slideshowID = i;              options.action = 'goToSlide';              Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].goToSlide(options);            }          });        }      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Implement the goToSlide hook for pagers.   */  Drupal.viewsSlideshowPager.goToSlide = function (options) {    // Route the pager call to the correct pager type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].goToSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].goToSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].goToSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].goToSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Implement the previousSlide hook for pagers.   */  Drupal.viewsSlideshowPager.previousSlide = function (options) {    // Route the pager call to the correct pager type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].previousSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].previousSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].previousSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].previousSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Implement the nextSlide hook for pagers.   */  Drupal.viewsSlideshowPager.nextSlide = function (options) {    // Route the pager call to the correct pager type.    // Need to use try catch so we don't have to check to make sure every part    // of the object is defined.    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].nextSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].top.type].nextSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }    try {      if (typeof Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type != "undefined" && typeof Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].nextSlide == 'function') {        Drupal[Drupal.settings.viewsSlideshowPager[options.slideshowID].bottom.type].nextSlide(options);      }    }    catch(err) {      // Don't need to do anything on error.    }  };  /**   * Views Slideshow Pager Fields   */  // Add views slideshow api calls for views slideshow pager fields.  Drupal.behaviors.viewsSlideshowPagerFields = {    attach: function (context) {      // Process pause on hover.      $('.views_slideshow_pager_field:not(.views-slideshow-pager-field-processed)', context).addClass('views-slideshow-pager-field-processed').each(function() {        // Parse out the location and unique id from the full id.        var pagerInfo = $(this).attr('id').split('_');        var location = pagerInfo[2];        pagerInfo.splice(0, 3);        var uniqueID = pagerInfo.join('_');        // Add the activate and pause on pager hover event to each pager item.        if (Drupal.settings.viewsSlideshowPagerFields[uniqueID][location].activatePauseOnHover) {          $(this).children().each(function(index, pagerItem) {            var mouseIn = function() {              Drupal.viewsSlideshow.action({ "action": 'goToSlide', "slideshowID": uniqueID, "slideNum": index });              Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": uniqueID });            };            var mouseOut = function() {              Drupal.viewsSlideshow.action({ "action": 'play', "slideshowID": uniqueID });            };            if (jQuery.fn.hoverIntent) {              $(pagerItem).hoverIntent(mouseIn, mouseOut);            }            else {              $(pagerItem).hover(mouseIn, mouseOut);            }          });        }        else {          $(this).children().each(function(index, pagerItem) {            $(pagerItem).click(function() {              Drupal.viewsSlideshow.action({ "action": 'goToSlide', "slideshowID": uniqueID, "slideNum": index });            });          });        }      });    }  };  Drupal.viewsSlideshowPagerFields = Drupal.viewsSlideshowPagerFields || {};  /**   * Implement the transitionBegin hook for pager fields pager.   */  Drupal.viewsSlideshowPagerFields.transitionBegin = function (options) {    for (pagerLocation in Drupal.settings.viewsSlideshowPager[options.slideshowID]) {      // Remove active class from pagers      $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').removeClass('active');      // Add active class to active pager.      $('#views_slideshow_pager_field_item_'+ pagerLocation + '_' + options.slideshowID + '_' + options.slideNum).addClass('active');    }  };  /**   * Implement the goToSlide hook for pager fields pager.   */  Drupal.viewsSlideshowPagerFields.goToSlide = function (options) {    for (pagerLocation in Drupal.settings.viewsSlideshowPager[options.slideshowID]) {      // Remove active class from pagers      $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').removeClass('active');      // Add active class to active pager.      $('#views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '_' + options.slideNum).addClass('active');    }  };  /**   * Implement the previousSlide hook for pager fields pager.   */  Drupal.viewsSlideshowPagerFields.previousSlide = function (options) {    for (pagerLocation in Drupal.settings.viewsSlideshowPager[options.slideshowID]) {      // Get the current active pager.      var pagerNum = $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"].active').attr('id').replace('views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '_', '');      // If we are on the first pager then activate the last pager.      // Otherwise activate the previous pager.      if (pagerNum == 0) {        pagerNum = $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').length() - 1;      }      else {        pagerNum--;      }      // Remove active class from pagers      $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').removeClass('active');      // Add active class to active pager.      $('#views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '_' + pagerNum).addClass('active');    }  };  /**   * Implement the nextSlide hook for pager fields pager.   */  Drupal.viewsSlideshowPagerFields.nextSlide = function (options) {    for (pagerLocation in Drupal.settings.viewsSlideshowPager[options.slideshowID]) {      // Get the current active pager.      var pagerNum = $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"].active').attr('id').replace('views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '_', '');      var totalPagers = $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').length();      // If we are on the last pager then activate the first pager.      // Otherwise activate the next pager.      pagerNum++;      if (pagerNum == totalPagers) {        pagerNum = 0;      }      // Remove active class from pagers      $('[id^="views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '"]').removeClass('active');      // Add active class to active pager.      $('#views_slideshow_pager_field_item_' + pagerLocation + '_' + options.slideshowID + '_' + slideNum).addClass('active');    }  };  /**   * Views Slideshow Slide Counter   */  Drupal.viewsSlideshowSlideCounter = Drupal.viewsSlideshowSlideCounter || {};  /**   * Implement the transitionBegin for the slide counter.   */  Drupal.viewsSlideshowSlideCounter.transitionBegin = function (options) {    $('#views_slideshow_slide_counter_' + options.slideshowID + ' .num').text(options.slideNum + 1);  };  /**   * This is used as a router to process actions for the slideshow.   */  Drupal.viewsSlideshow.action = function (options) {    // Set default values for our return status.    var status = {      'value': true,      'text': ''    };    // If an action isn't specified return false.    if (typeof options.action == 'undefined' || options.action == '') {      status.value = false;      status.text =  Drupal.t('There was no action specified.');      return error;    }    // If we are using pause or play switch paused state accordingly.    if (options.action == 'pause') {      Drupal.settings.viewsSlideshow[options.slideshowID].paused = 1;      // If the calling method is forcing a pause then mark it as such.      if (options.force) {        Drupal.settings.viewsSlideshow[options.slideshowID].pausedForce = 1;      }    }    else if (options.action == 'play') {      // If the slideshow isn't forced pause or we are forcing a play then play      // the slideshow.      // Otherwise return telling the calling method that it was forced paused.      if (!Drupal.settings.viewsSlideshow[options.slideshowID].pausedForce || options.force) {        Drupal.settings.viewsSlideshow[options.slideshowID].paused = 0;        Drupal.settings.viewsSlideshow[options.slideshowID].pausedForce = 0;      }      else {        status.value = false;        status.text += ' ' + Drupal.t('This slideshow is forced paused.');        return status;      }    }    // We use a switch statement here mainly just to limit the type of actions    // that are available.    switch (options.action) {      case "goToSlide":      case "transitionBegin":      case "transitionEnd":        // The three methods above require a slide number. Checking if it is        // defined and it is a number that is an integer.        if (typeof options.slideNum == 'undefined' || typeof options.slideNum !== 'number' || parseInt(options.slideNum) != (options.slideNum - 0)) {          status.value = false;          status.text = Drupal.t('An invalid integer was specified for slideNum.');        }      case "pause":      case "play":      case "nextSlide":      case "previousSlide":        // Grab our list of methods.        var methods = Drupal.settings.viewsSlideshow[options.slideshowID]['methods'];        // if the calling method specified methods that shouldn't be called then        // exclude calling them.        var excludeMethodsObj = {};        if (typeof options.excludeMethods !== 'undefined') {          // We need to turn the excludeMethods array into an object so we can use the in          // function.          for (var i=0; i < excludeMethods.length; i++) {            excludeMethodsObj[excludeMethods[i]] = '';          }        }        // Call every registered method and don't call excluded ones.        for (i = 0; i < methods[options.action].length; i++) {          if (Drupal[methods[options.action][i]] != undefined && typeof Drupal[methods[options.action][i]][options.action] == 'function' && !(methods[options.action][i] in excludeMethodsObj)) {            Drupal[methods[options.action][i]][options.action](options);          }        }        break;      // If it gets here it's because it's an invalid action.      default:        status.value = false;        status.text = Drupal.t('An invalid action "!action" was specified.', { "!action": options.action });    }    return status;  };})(jQuery);;/**/(function ($) {/** * Provides Ajax page updating via jQuery $.ajax (Asynchronous JavaScript and XML). * * Ajax is a method of making a request via JavaScript while viewing an HTML * page. The request returns an array of commands encoded in JSON, which is * then executed to make any changes that are necessary to the page. * * Drupal uses this file to enhance form elements with #ajax['path'] and * #ajax['wrapper'] properties. If set, this file will automatically be included * to provide Ajax capabilities. */Drupal.ajax = Drupal.ajax || {};Drupal.settings.urlIsAjaxTrusted = Drupal.settings.urlIsAjaxTrusted || {};/** * Attaches the Ajax behavior to each Ajax form element. */Drupal.behaviors.AJAX = {  attach: function (context, settings) {    // Load all Ajax behaviors specified in the settings.    for (var base in settings.ajax) {      if (!$('#' + base + '.ajax-processed').length) {        var element_settings = settings.ajax[base];        if (typeof element_settings.selector == 'undefined') {          element_settings.selector = '#' + base;        }        $(element_settings.selector).each(function () {          element_settings.element = this;          Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);        });        $('#' + base).addClass('ajax-processed');      }    }    // Bind Ajax behaviors to all items showing the class.    $('.use-ajax:not(.ajax-processed)').addClass('ajax-processed').each(function () {      var element_settings = {};      // Clicked links look better with the throbber than the progress bar.      element_settings.progress = { 'type': 'throbber' };      // For anchor tags, these will go to the target of the anchor rather      // than the usual location.      if ($(this).attr('href')) {        element_settings.url = $(this).attr('href');        element_settings.event = 'click';      }      var base = $(this).attr('id');      Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);    });    // This class means to submit the form to the action using Ajax.    $('.use-ajax-submit:not(.ajax-processed)').addClass('ajax-processed').each(function () {      var element_settings = {};      // Ajax submits specified in this manner automatically submit to the      // normal form action.      element_settings.url = $(this.form).attr('action');      // Form submit button clicks need to tell the form what was clicked so      // it gets passed in the POST request.      element_settings.setClick = true;      // Form buttons use the 'click' event rather than mousedown.      element_settings.event = 'click';      // Clicked form buttons look better with the throbber than the progress bar.      element_settings.progress = { 'type': 'throbber' };      var base = $(this).attr('id');      Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);    });  }};/** * Ajax object. * * All Ajax objects on a page are accessible through the global Drupal.ajax * object and are keyed by the submit button's ID. You can access them from * your module's JavaScript file to override properties or functions. * * For example, if your Ajax enabled button has the ID 'edit-submit', you can * redefine the function that is called to insert the new content like this * (inside a Drupal.behaviors attach block): * @code *    Drupal.behaviors.myCustomAJAXStuff = { *      attach: function (context, settings) { *        Drupal.ajax['edit-submit'].commands.insert = function (ajax, response, status) { *          new_content = $(response.data); *          $('#my-wrapper').append(new_content); *          alert('New content was appended to #my-wrapper'); *        } *      } *    }; * @endcode */Drupal.ajax = function (base, element, element_settings) {  var defaults = {    url: 'system/ajax',    event: 'mousedown',    keypress: true,    selector: '#' + base,    effect: 'none',    speed: 'none',    method: 'replaceWith',    progress: {      type: 'throbber',      message: Drupal.t('Please wait...')    },    submit: {      'js': true    }  };  $.extend(this, defaults, element_settings);  this.element = element;  this.element_settings = element_settings;  // Replacing 'nojs' with 'ajax' in the URL allows for an easy method to let  // the server detect when it needs to degrade gracefully.  // There are five scenarios to check for:  // 1. /nojs/  // 2. /nojs$ - The end of a URL string.  // 3. /nojs? - Followed by a query (with clean URLs enabled).  //      E.g.: path/nojs?destination=foobar  // 4. /nojs& - Followed by a query (without clean URLs enabled).  //      E.g.: ?q=path/nojs&destination=foobar  // 5. /nojs# - Followed by a fragment.  //      E.g.: path/nojs#myfragment  this.url = element_settings.url.replace(/\/nojs(\/|$|\?|&|#)/g, '/ajax$1');  // If the 'nojs' version of the URL is trusted, also trust the 'ajax' version.  if (Drupal.settings.urlIsAjaxTrusted[element_settings.url]) {    Drupal.settings.urlIsAjaxTrusted[this.url] = true;  }  this.wrapper = '#' + element_settings.wrapper;  // If there isn't a form, jQuery.ajax() will be used instead, allowing us to  // bind Ajax to links as well.  if (this.element.form) {    this.form = $(this.element.form);  }  // Set the options for the ajaxSubmit function.  // The 'this' variable will not persist inside of the options object.  var ajax = this;  ajax.options = {    url: ajax.url,    data: ajax.submit,    beforeSerialize: function (element_settings, options) {      return ajax.beforeSerialize(element_settings, options);    },    beforeSubmit: function (form_values, element_settings, options) {      ajax.ajaxing = true;      return ajax.beforeSubmit(form_values, element_settings, options);    },    beforeSend: function (xmlhttprequest, options) {      ajax.ajaxing = true;      return ajax.beforeSend(xmlhttprequest, options);    },    success: function (response, status, xmlhttprequest) {      // Sanity check for browser support (object expected).      // When using iFrame uploads, responses must be returned as a string.      if (typeof response == 'string') {        response = $.parseJSON(response);      }      // Prior to invoking the response's commands, verify that they can be      // trusted by checking for a response header. See      // ajax_set_verification_header() for details.      // - Empty responses are harmless so can bypass verification. This avoids      //   an alert message for server-generated no-op responses that skip Ajax      //   rendering.      // - Ajax objects with trusted URLs (e.g., ones defined server-side via      //   #ajax) can bypass header verification. This is especially useful for      //   Ajax with multipart forms. Because IFRAME transport is used, the      //   response headers cannot be accessed for verification.      if (response !== null && !Drupal.settings.urlIsAjaxTrusted[ajax.url]) {        if (xmlhttprequest.getResponseHeader('X-Drupal-Ajax-Token') !== '1') {          var customMessage = Drupal.t("The response failed verification so will not be processed.");          return ajax.error(xmlhttprequest, ajax.url, customMessage);        }      }      return ajax.success(response, status);    },    complete: function (xmlhttprequest, status) {      ajax.ajaxing = false;      if (status == 'error' || status == 'parsererror') {        return ajax.error(xmlhttprequest, ajax.url);      }    },    dataType: 'json',    type: 'POST'  };  // Bind the ajaxSubmit function to the element event.  $(ajax.element).bind(element_settings.event, function (event) {    if (!Drupal.settings.urlIsAjaxTrusted[ajax.url] && !Drupal.urlIsLocal(ajax.url)) {      throw new Error(Drupal.t('The callback URL is not local and not trusted: !url', {'!url': ajax.url}));    }    return ajax.eventResponse(this, event);  });  // If necessary, enable keyboard submission so that Ajax behaviors  // can be triggered through keyboard input as well as e.g. a mousedown  // action.  if (element_settings.keypress) {    $(ajax.element).keypress(function (event) {      return ajax.keypressResponse(this, event);    });  }  // If necessary, prevent the browser default action of an additional event.  // For example, prevent the browser default action of a click, even if the  // AJAX behavior binds to mousedown.  if (element_settings.prevent) {    $(ajax.element).bind(element_settings.prevent, false);  }};/** * Handle a key press. * * The Ajax object will, if instructed, bind to a key press response. This * will test to see if the key press is valid to trigger this event and * if it is, trigger it for us and prevent other keypresses from triggering. * In this case we're handling RETURN and SPACEBAR keypresses (event codes 13 * and 32. RETURN is often used to submit a form when in a textfield, and  * SPACE is often used to activate an element without submitting.  */Drupal.ajax.prototype.keypressResponse = function (element, event) {  // Create a synonym for this to reduce code confusion.  var ajax = this;  // Detect enter key and space bar and allow the standard response for them,  // except for form elements of type 'text' and 'textarea', where the   // spacebar activation causes inappropriate activation if #ajax['keypress'] is   // TRUE. On a text-type widget a space should always be a space.  if (event.which == 13 || (event.which == 32 && element.type != 'text' && element.type != 'textarea')) {    $(ajax.element_settings.element).trigger(ajax.element_settings.event);    return false;  }};/** * Handle an event that triggers an Ajax response. * * When an event that triggers an Ajax response happens, this method will * perform the actual Ajax call. It is bound to the event using * bind() in the constructor, and it uses the options specified on the * ajax object. */Drupal.ajax.prototype.eventResponse = function (element, event) {  // Create a synonym for this to reduce code confusion.  var ajax = this;  // Do not perform another ajax command if one is already in progress.  if (ajax.ajaxing) {    return false;  }  try {    if (ajax.form) {      // If setClick is set, we must set this to ensure that the button's      // value is passed.      if (ajax.setClick) {        // Mark the clicked button. 'form.clk' is a special variable for        // ajaxSubmit that tells the system which element got clicked to        // trigger the submit. Without it there would be no 'op' or        // equivalent.        element.form.clk = element;      }      ajax.form.ajaxSubmit(ajax.options);    }    else {      ajax.beforeSerialize(ajax.element, ajax.options);      $.ajax(ajax.options);    }  }  catch (e) {    // Unset the ajax.ajaxing flag here because it won't be unset during    // the complete response.    ajax.ajaxing = false;    alert("An error occurred while attempting to process " + ajax.options.url + ": " + e.message);  }  // For radio/checkbox, allow the default event. On IE, this means letting  // it actually check the box.  if (typeof element.type != 'undefined' && (element.type == 'checkbox' || element.type == 'radio')) {    return true;  }  else {    return false;  }};/** * Handler for the form serialization. * * Runs before the beforeSend() handler (see below), and unlike that one, runs * before field data is collected. */Drupal.ajax.prototype.beforeSerialize = function (element, options) {  // Allow detaching behaviors to update field values before collecting them.  // This is only needed when field values are added to the POST data, so only  // when there is a form such that this.form.ajaxSubmit() is used instead of  // $.ajax(). When there is no form and $.ajax() is used, beforeSerialize()  // isn't called, but don't rely on that: explicitly check this.form.  if (this.form) {    var settings = this.settings || Drupal.settings;    Drupal.detachBehaviors(this.form, settings, 'serialize');  }  // Prevent duplicate HTML ids in the returned markup.  // @see drupal_html_id()  options.data['ajax_html_ids[]'] = [];  $('[id]').each(function () {    options.data['ajax_html_ids[]'].push(this.id);  });  // Allow Drupal to return new JavaScript and CSS files to load without  // returning the ones already loaded.  // @see ajax_base_page_theme()  // @see drupal_get_css()  // @see drupal_get_js()  options.data['ajax_page_state[theme]'] = Drupal.settings.ajaxPageState.theme;  options.data['ajax_page_state[theme_token]'] = Drupal.settings.ajaxPageState.theme_token;  for (var key in Drupal.settings.ajaxPageState.css) {    options.data['ajax_page_state[css][' + key + ']'] = 1;  }  for (var key in Drupal.settings.ajaxPageState.js) {    options.data['ajax_page_state[js][' + key + ']'] = 1;  }};/** * Modify form values prior to form submission. */Drupal.ajax.prototype.beforeSubmit = function (form_values, element, options) {  // This function is left empty to make it simple to override for modules  // that wish to add functionality here.};/** * Prepare the Ajax request before it is sent. */Drupal.ajax.prototype.beforeSend = function (xmlhttprequest, options) {  // For forms without file inputs, the jQuery Form plugin serializes the form  // values, and then calls jQuery's $.ajax() function, which invokes this  // handler. In this circumstance, options.extraData is never used. For forms  // with file inputs, the jQuery Form plugin uses the browser's normal form  // submission mechanism, but captures the response in a hidden IFRAME. In this  // circumstance, it calls this handler first, and then appends hidden fields  // to the form to submit the values in options.extraData. There is no simple  // way to know which submission mechanism will be used, so we add to extraData  // regardless, and allow it to be ignored in the former case.  if (this.form) {    options.extraData = options.extraData || {};    // Let the server know when the IFRAME submission mechanism is used. The    // server can use this information to wrap the JSON response in a TEXTAREA,    // as per http://jquery.malsup.com/form/#file-upload.    options.extraData.ajax_iframe_upload = '1';    // The triggering element is about to be disabled (see below), but if it    // contains a value (e.g., a checkbox, textfield, select, etc.), ensure that    // value is included in the submission. As per above, submissions that use    // $.ajax() are already serialized prior to the element being disabled, so    // this is only needed for IFRAME submissions.    var v = $.fieldValue(this.element);    if (v !== null) {      options.extraData[this.element.name] = Drupal.checkPlain(v);    }  }  // Disable the element that received the change to prevent user interface  // interaction while the Ajax request is in progress. ajax.ajaxing prevents  // the element from triggering a new request, but does not prevent the user  // from changing its value.  $(this.element).addClass('progress-disabled').attr('disabled', true);  // Insert progressbar or throbber.  if (this.progress.type == 'bar') {    var progressBar = new Drupal.progressBar('ajax-progress-' + this.element.id, eval(this.progress.update_callback), this.progress.method, eval(this.progress.error_callback));    if (this.progress.message) {      progressBar.setProgress(-1, this.progress.message);    }    if (this.progress.url) {      progressBar.startMonitoring(this.progress.url, this.progress.interval || 1500);    }    this.progress.element = $(progressBar.element).addClass('ajax-progress ajax-progress-bar');    this.progress.object = progressBar;    $(this.element).after(this.progress.element);  }  else if (this.progress.type == 'throbber') {    this.progress.element = $('<div class="ajax-progress ajax-progress-throbber"><div class="throbber">&nbsp;</div></div>');    if (this.progress.message) {      $('.throbber', this.progress.element).after('<div class="message">' + this.progress.message + '</div>');    }    $(this.element).after(this.progress.element);  }};/** * Handler for the form redirection completion. */Drupal.ajax.prototype.success = function (response, status) {  // Remove the progress element.  if (this.progress.element) {    $(this.progress.element).remove();  }  if (this.progress.object) {    this.progress.object.stopMonitoring();  }  $(this.element).removeClass('progress-disabled').removeAttr('disabled');  Drupal.freezeHeight();  for (var i in response) {    if (response.hasOwnProperty(i) && response[i]['command'] && this.commands[response[i]['command']]) {      this.commands[response[i]['command']](this, response[i], status);    }  }  // Reattach behaviors, if they were detached in beforeSerialize(). The  // attachBehaviors() called on the new content from processing the response  // commands is not sufficient, because behaviors from the entire form need  // to be reattached.  if (this.form) {    var settings = this.settings || Drupal.settings;    Drupal.attachBehaviors(this.form, settings);  }  Drupal.unfreezeHeight();  // Remove any response-specific settings so they don't get used on the next  // call by mistake.  this.settings = null;};/** * Build an effect object which tells us how to apply the effect when adding new HTML. */Drupal.ajax.prototype.getEffect = function (response) {  var type = response.effect || this.effect;  var speed = response.speed || this.speed;  var effect = {};  if (type == 'none') {    effect.showEffect = 'show';    effect.hideEffect = 'hide';    effect.showSpeed = '';  }  else if (type == 'fade') {    effect.showEffect = 'fadeIn';    effect.hideEffect = 'fadeOut';    effect.showSpeed = speed;  }  else {    effect.showEffect = type + 'Toggle';    effect.hideEffect = type + 'Toggle';    effect.showSpeed = speed;  }  return effect;};/** * Handler for the form redirection error. */Drupal.ajax.prototype.error = function (xmlhttprequest, uri, customMessage) {  Drupal.displayAjaxError(Drupal.ajaxError(xmlhttprequest, uri, customMessage));  // Remove the progress element.  if (this.progress.element) {    $(this.progress.element).remove();  }  if (this.progress.object) {    this.progress.object.stopMonitoring();  }  // Undo hide.  $(this.wrapper).show();  // Re-enable the element.  $(this.element).removeClass('progress-disabled').removeAttr('disabled');  // Reattach behaviors, if they were detached in beforeSerialize().  if (this.form) {    var settings = this.settings || Drupal.settings;    Drupal.attachBehaviors(this.form, settings);  }};/** * Provide a series of commands that the server can request the client perform. */Drupal.ajax.prototype.commands = {  /**   * Command to insert new content into the DOM.   */  insert: function (ajax, response, status) {    // Get information from the response. If it is not there, default to    // our presets.    var wrapper = response.selector ? $(response.selector) : $(ajax.wrapper);    var method = response.method || ajax.method;    var effect = ajax.getEffect(response);    // We don't know what response.data contains: it might be a string of text    // without HTML, so don't rely on jQuery correctly iterpreting    // $(response.data) as new HTML rather than a CSS selector. Also, if    // response.data contains top-level text nodes, they get lost with either    // $(response.data) or $('<div></div>').replaceWith(response.data).    var new_content_wrapped = $('<div></div>').html(response.data);    var new_content = new_content_wrapped.contents();    // For legacy reasons, the effects processing code assumes that new_content    // consists of a single top-level element. Also, it has not been    // sufficiently tested whether attachBehaviors() can be successfully called    // with a context object that includes top-level text nodes. However, to    // give developers full control of the HTML appearing in the page, and to    // enable Ajax content to be inserted in places where DIV elements are not    // allowed (e.g., within TABLE, TR, and SPAN parents), we check if the new    // content satisfies the requirement of a single top-level element, and    // only use the container DIV created above when it doesn't. For more    // information, please see http://drupal.org/node/736066.    if (new_content.length != 1 || new_content.get(0).nodeType != 1) {      new_content = new_content_wrapped;    }    // If removing content from the wrapper, detach behaviors first.    switch (method) {      case 'html':      case 'replaceWith':      case 'replaceAll':      case 'empty':      case 'remove':        var settings = response.settings || ajax.settings || Drupal.settings;        Drupal.detachBehaviors(wrapper, settings);    }    // Add the new content to the page.    wrapper[method](new_content);    // Immediately hide the new content if we're using any effects.    if (effect.showEffect != 'show') {      new_content.hide();    }    // Determine which effect to use and what content will receive the    // effect, then show the new content.    if ($('.ajax-new-content', new_content).length > 0) {      $('.ajax-new-content', new_content).hide();      new_content.show();      $('.ajax-new-content', new_content)[effect.showEffect](effect.showSpeed);    }    else if (effect.showEffect != 'show') {      new_content[effect.showEffect](effect.showSpeed);    }    // Attach all JavaScript behaviors to the new content, if it was successfully    // added to the page, this if statement allows #ajax['wrapper'] to be    // optional.    if (new_content.parents('html').length > 0) {      // Apply any settings from the returned JSON if available.      var settings = response.settings || ajax.settings || Drupal.settings;      Drupal.attachBehaviors(new_content, settings);    }  },  /**   * Command to remove a chunk from the page.   */  remove: function (ajax, response, status) {    var settings = response.settings || ajax.settings || Drupal.settings;    Drupal.detachBehaviors($(response.selector), settings);    $(response.selector).remove();  },  /**   * Command to mark a chunk changed.   */  changed: function (ajax, response, status) {    if (!$(response.selector).hasClass('ajax-changed')) {      $(response.selector).addClass('ajax-changed');      if (response.asterisk) {        $(response.selector).find(response.asterisk).append(' <span class="ajax-changed">*</span> ');      }    }  },  /**   * Command to provide an alert.   */  alert: function (ajax, response, status) {    alert(response.text, response.title);  },  /**   * Command to provide the jQuery css() function.   */  css: function (ajax, response, status) {    $(response.selector).css(response.argument);  },  /**   * Command to set the settings that will be used for other commands in this response.   */  settings: function (ajax, response, status) {    if (response.merge) {      $.extend(true, Drupal.settings, response.settings);    }    else {      ajax.settings = response.settings;    }  },  /**   * Command to attach data using jQuery's data API.   */  data: function (ajax, response, status) {    $(response.selector).data(response.name, response.value);  },  /**   * Command to apply a jQuery method.   */  invoke: function (ajax, response, status) {    var $element = $(response.selector);    $element[response.method].apply($element, response.arguments);  },  /**   * Command to restripe a table.   */  restripe: function (ajax, response, status) {    // :even and :odd are reversed because jQuery counts from 0 and    // we count from 1, so we're out of sync.    // Match immediate children of the parent element to allow nesting.    $('> tbody > tr:visible, > tr:visible', $(response.selector))      .removeClass('odd even')      .filter(':even').addClass('odd').end()      .filter(':odd').addClass('even');  },  /**   * Command to add css.   *   * Uses the proprietary addImport method if available as browsers which   * support that method ignore @import statements in dynamically added   * stylesheets.   */  add_css: function (ajax, response, status) {    // Add the styles in the normal way.    $('head').prepend(response.data);    // Add imports in the styles using the addImport method if available.    var match, importMatch = /^@import url\("(.*)"\);$/igm;    if (document.styleSheets[0].addImport && importMatch.test(response.data)) {      importMatch.lastIndex = 0;      while (match = importMatch.exec(response.data)) {        document.styleSheets[0].addImport(match[1]);      }    }  },  /**   * Command to update a form's build ID.   */  updateBuildId: function(ajax, response, status) {    $('input[name="form_build_id"][value="' + response['old'] + '"]').val(response['new']);  }};})(jQuery);;/**/(function (D) {  var beforeSerialize = D.ajax.prototype.beforeSerialize;  D.ajax.prototype.beforeSerialize = function (element, options) {    beforeSerialize.call(this, element, options);    options.data['ajax_page_state[jquery_version]'] = D.settings.ajaxPageState.jquery_version;  }})(Drupal);;/**/(function ($) {Drupal.behaviors.commentNotify = {  attach: function (context) {    $('#edit-notify', context)      .bind('change', function() {        $('#edit-notify-type', context)          [this.checked ? 'show' : 'hide']()          .find('input[type=checkbox]:checked').attr('checked', 'checked');      })      .trigger('change');  }}})(jQuery);;/**/(function($){  Drupal.behaviors.noclickety = {attach: function(context){    $('.noclickety').removeAttr('disabled').removeClass('noclickety');    $('input').once().change(function(){      $('.noclickety').removeAttr('disabled').removeClass('noclickety');    });    $('form').once().submit(function(e){      //$(this).append('<input type="hidden" name="' + $(e.originalEvent.explicitOriginalTarget).attr('name') + '" value="' + $(e.originalEvent.explicitOriginalTarget).val() + '" />');      //$('input[type="submit"][disabled!="disabled"]', $(this)).attr('disabled', 'disabled').addClass('noclickety');    });  }};})(jQuery);;/**//** * Scratchpads contact JS */  (function ($) { Drupal.behaviors.initScratchpadsContactForm = {   attach: function (context, settings) {     $("a[href^='/contact'], a[href*='?q=contact']", context).once('init-modal-forms-contact', function () {       this.href = this.href.replace(/contact/,'modal_forms/nojs/contact');     }).addClass('ctools-use-modal ctools-modal-modal-popup-medium');   } }; })(jQuery); ;/**//** * Colorbox JS */(function($){  Drupal.behaviors.ScratchpadsColorBox = {attach: function(context){    var pathparts = $(location).attr('pathname').split('/');    if(pathparts[pathparts.length-1]!='delete'){      try {        $('a[href^="' + Drupal.settings.basePath + Drupal.settings.pathPrefix + 'file/"]', context).each(function(){          if(!$(this).attr('href').match('file/[0-9]*/(.*)') && !$(this).attr('href').match('file/add') && $(this).colorbox) {            $(this).attr('href', $(this).attr('href').replace(Drupal.settings.basePath + Drupal.settings.pathPrefix + 'file/', Drupal.settings.basePath + Drupal.settings.pathPrefix + 'file-colorboxed/'))            $(this).colorbox($.extend({rel: 'gallery'}, Drupal.settings.colorbox));          }        });      } catch(err) {}    }  }}})(jQuery);;/**/Drupal.settings.scratchpads_issues_block = {  // Hook used by remote_issues_tab module  // Take the JSON body from the issue feed, filter and map  parse_response: function(body) {    return body.reduce(      (acc, item) => {        // Take first 10 issues that aren't pull requests        if (acc.length >= 10 || item.pull_request) {          return acc;        }        const labels = item.labels.map(          label => `<span class="label" style="border-color:#${label.color};">${ label.name }</span>`        ).join('');        // Map to format expected by remote_issues_tab        return acc.concat({          link: '/issues/' + item.html_url.match(/[0-9]+(?=\/?$)/)[0],          title: item.title,          body: labels + marked(item.body || '(No details)')        });      },      []    )  }};/**/jQuery(document).ready(function($){  var obj = {};  // Initialise object  $("div.taxon_field_wrapper").each(function(){    var this_fieldset_id = $(this).closest("fieldset.vertical-tabs-pane").attr("id");    if(typeof this_fieldset_id != 'undefined') {      obj[this_fieldset_id] = 0;    }  });  // Count members of fieldset  $("div.taxon_field_wrapper").each(function(){    var this_fieldset_id = $(this).closest("fieldset.vertical-tabs-pane").attr("id");    if(typeof this_fieldset_id != 'undefined') {      var no_show = $(this).hasClass('unused_text_field');      if(no_show == false) {        obj[this_fieldset_id] = obj[this_fieldset_id] + 1;      }    }  });  // Add 'non_empty_tab' class to tabs that have content  var simple_array = new Array();  for( var propt in obj) {    simple_array.push(obj[propt]);  }  $count = 0;  $(".field-group-tabs-wrapper li.vertical-tab-button").each(function(){    if(simple_array[$count] > 0) {      $(this).addClass('non_empty_tab');    }    $count++;  });});;/**/// jQuery $ thingy(function($){Drupal.twitterscript = Drupal.twitterscript || {};	function autolink(s){  var hlink = /\s(ht|f)tp:\/\/([^ \,\;\:\!\)\(\"\'\<\>\f\n\r\t\v])+/g;  return (s.replace (hlink, function ($0,$1,$2){    s = $0.substring(1,$0.length);     // remove trailing dots, if any    while (s.length>0 && s.charAt(s.length-1)=='.')       s=s.substring(0,s.length-1);    // add hlink    return " " + s.link(s);   }));}Drupal.behaviors.twitterscript = { attach: function (context, settings){  $('.twitterscript', context).each(function(){    var twitterscript = this;    $.getJSON('http://search.twitter.com/search.json?rpp=5&q=' + escape($(this).html()) + '&callback=?', function(data){      var html_to_embed = '<ul class="twitterscript-list">';      var no_results = true;      $.each(data.results, function(){        no_results = false;        html_to_embed += '<li><a href="http://twitter.com/'+this.from_user+'"><img src="'+this.profile_image_url+'"/></a>'+ autolink(this.text) +'</li>';      });      if(no_results){        html_to_embed += '<li>There are no results for "<em>'+$(twitterscript).html()+'</em>"</li>';      }      html_to_embed += '</ul>';      $(twitterscript).replaceWith(html_to_embed);    });  }); }}// jQuery $ thingy})(jQuery);;/**/// ColorBox v1.3.19 - jQuery lightbox plugin// (c) 2011 Jack Moore - jacklmoore.com// License: http://www.opensource.org/licenses/mit-license.php(function(a,b,c){function Z(c,d,e){var g=b.createElement(c);return d&&(g.id=f+d),e&&(g.style.cssText=e),a(g)}function $(a){var b=y.length,c=(Q+a)%b;return c<0?b+c:c}function _(a,b){return Math.round((/%/.test(a)?(b==="x"?z.width():z.height())/100:1)*parseInt(a,10))}function ba(a){return K.photo||/\.(gif|png|jpe?g|bmp|ico)((#|\?).*)?$/i.test(a)}function bb(){var b;K=a.extend({},a.data(P,e));for(b in K)a.isFunction(K[b])&&b.slice(0,2)!=="on"&&(K[b]=K[b].call(P));K.rel=K.rel||P.rel||"nofollow",K.href=K.href||a(P).attr("href"),K.title=K.title||P.title,typeof K.href=="string"&&(K.href=a.trim(K.href))}function bc(b,c){a.event.trigger(b),c&&c.call(P)}function bd(){var a,b=f+"Slideshow_",c="click."+f,d,e,g;K.slideshow&&y[1]?(d=function(){F.text(K.slideshowStop).unbind(c).bind(j,function(){if(K.loop||y[Q+1])a=setTimeout(W.next,K.slideshowSpeed)}).bind(i,function(){clearTimeout(a)}).one(c+" "+k,e),r.removeClass(b+"off").addClass(b+"on"),a=setTimeout(W.next,K.slideshowSpeed)},e=function(){clearTimeout(a),F.text(K.slideshowStart).unbind([j,i,k,c].join(" ")).one(c,function(){W.next(),d()}),r.removeClass(b+"on").addClass(b+"off")},K.slideshowAuto?d():e()):r.removeClass(b+"off "+b+"on")}function be(b){U||(P=b,bb(),y=a(P),Q=0,K.rel!=="nofollow"&&(y=a("."+g).filter(function(){var b=a.data(this,e).rel||this.rel;return b===K.rel}),Q=y.index(P),Q===-1&&(y=y.add(P),Q=y.length-1)),S||(S=T=!0,r.show(),K.returnFocus&&a(P).blur().one(l,function(){a(this).focus()}),q.css({opacity:+K.opacity,cursor:K.overlayClose?"pointer":"auto"}).show(),K.w=_(K.initialWidth,"x"),K.h=_(K.initialHeight,"y"),W.position(),o&&z.bind("resize."+p+" scroll."+p,function(){q.css({width:z.width(),height:z.height(),top:z.scrollTop(),left:z.scrollLeft()})}).trigger("resize."+p),bc(h,K.onOpen),J.add(D).hide(),I.html(K.close).show()),W.load(!0))}function bf(){!r&&b.body&&(Y=!1,z=a(c),r=Z(X).attr({id:e,"class":n?f+(o?"IE6":"IE"):""}).hide(),q=Z(X,"Overlay",o?"position:absolute":"").hide(),s=Z(X,"Wrapper"),t=Z(X,"Content").append(A=Z(X,"LoadedContent","width:0; height:0; overflow:hidden"),C=Z(X,"LoadingOverlay").add(Z(X,"LoadingGraphic")),D=Z(X,"Title"),E=Z(X,"Current"),G=Z(X,"Next"),H=Z(X,"Previous"),F=Z(X,"Slideshow").bind(h,bd),I=Z(X,"Close")),s.append(Z(X).append(Z(X,"TopLeft"),u=Z(X,"TopCenter"),Z(X,"TopRight")),Z(X,!1,"clear:left").append(v=Z(X,"MiddleLeft"),t,w=Z(X,"MiddleRight")),Z(X,!1,"clear:left").append(Z(X,"BottomLeft"),x=Z(X,"BottomCenter"),Z(X,"BottomRight"))).find("div div").css({"float":"left"}),B=Z(X,!1,"position:absolute; width:9999px; visibility:hidden; display:none"),J=G.add(H).add(E).add(F),a(b.body).append(q,r.append(s,B)))}function bg(){return r?(Y||(Y=!0,L=u.height()+x.height()+t.outerHeight(!0)-t.height(),M=v.width()+w.width()+t.outerWidth(!0)-t.width(),N=A.outerHeight(!0),O=A.outerWidth(!0),r.css({"padding-bottom":L,"padding-right":M}),G.click(function(){W.next()}),H.click(function(){W.prev()}),I.click(function(){W.close()}),q.click(function(){K.overlayClose&&W.close()}),a(b).bind("keydown."+f,function(a){var b=a.keyCode;S&&K.escKey&&b===27&&(a.preventDefault(),W.close()),S&&K.arrowKey&&y[1]&&(b===37?(a.preventDefault(),H.click()):b===39&&(a.preventDefault(),G.click()))}),a("."+g,b).live("click",function(a){a.which>1||a.shiftKey||a.altKey||a.metaKey||(a.preventDefault(),be(this))})),!0):!1}var d={transition:"elastic",speed:300,width:!1,initialWidth:"600",innerWidth:!1,maxWidth:!1,height:!1,initialHeight:"450",innerHeight:!1,maxHeight:!1,scalePhotos:!0,scrolling:!0,inline:!1,html:!1,iframe:!1,fastIframe:!0,photo:!1,href:!1,title:!1,rel:!1,opacity:.9,preloading:!0,current:"image {current} of {total}",previous:"previous",next:"next",close:"close",open:!1,returnFocus:!0,reposition:!0,loop:!0,slideshow:!1,slideshowAuto:!0,slideshowSpeed:2500,slideshowStart:"start slideshow",slideshowStop:"stop slideshow",onOpen:!1,onLoad:!1,onComplete:!1,onCleanup:!1,onClosed:!1,overlayClose:!0,escKey:!0,arrowKey:!0,top:!1,bottom:!1,left:!1,right:!1,fixed:!1,data:undefined},e="colorbox",f="cbox",g=f+"Element",h=f+"_open",i=f+"_load",j=f+"_complete",k=f+"_cleanup",l=f+"_closed",m=f+"_purge",n=!a.support.opacity&&!a.support.style,o=n&&!c.XMLHttpRequest,p=f+"_IE6",q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X="div",Y;if(a.colorbox)return;a(bf),W=a.fn[e]=a[e]=function(b,c){var f=this;b=b||{},bf();if(bg()){if(!f[0]){if(f.selector)return f;f=a("<a/>"),b.open=!0}c&&(b.onComplete=c),f.each(function(){a.data(this,e,a.extend({},a.data(this,e)||d,b))}).addClass(g),(a.isFunction(b.open)&&b.open.call(f)||b.open)&&be(f[0])}return f},W.position=function(a,b){function i(a){u[0].style.width=x[0].style.width=t[0].style.width=a.style.width,t[0].style.height=v[0].style.height=w[0].style.height=a.style.height}var c=0,d=0,e=r.offset(),g=z.scrollTop(),h=z.scrollLeft();z.unbind("resize."+f),r.css({top:-9e4,left:-9e4}),K.fixed&&!o?(e.top-=g,e.left-=h,r.css({position:"fixed"})):(c=g,d=h,r.css({position:"absolute"})),K.right!==!1?d+=Math.max(z.width()-K.w-O-M-_(K.right,"x"),0):K.left!==!1?d+=_(K.left,"x"):d+=Math.round(Math.max(z.width()-K.w-O-M,0)/2),K.bottom!==!1?c+=Math.max(z.height()-K.h-N-L-_(K.bottom,"y"),0):K.top!==!1?c+=_(K.top,"y"):c+=Math.round(Math.max(z.height()-K.h-N-L,0)/2),r.css({top:e.top,left:e.left}),a=r.width()===K.w+O&&r.height()===K.h+N?0:a||0,s[0].style.width=s[0].style.height="9999px",r.dequeue().animate({width:K.w+O,height:K.h+N,top:c,left:d},{duration:a,complete:function(){i(this),T=!1,s[0].style.width=K.w+O+M+"px",s[0].style.height=K.h+N+L+"px",K.reposition&&setTimeout(function(){z.bind("resize."+f,W.position)},1),b&&b()},step:function(){i(this)}})},W.resize=function(a){S&&(a=a||{},a.width&&(K.w=_(a.width,"x")-O-M),a.innerWidth&&(K.w=_(a.innerWidth,"x")),A.css({width:K.w}),a.height&&(K.h=_(a.height,"y")-N-L),a.innerHeight&&(K.h=_(a.innerHeight,"y")),!a.innerHeight&&!a.height&&(A.css({height:"auto"}),K.h=A.height()),A.css({height:K.h}),W.position(K.transition==="none"?0:K.speed))},W.prep=function(b){function g(){return K.w=K.w||A.width(),K.w=K.mw&&K.mw<K.w?K.mw:K.w,K.w}function h(){return K.h=K.h||A.height(),K.h=K.mh&&K.mh<K.h?K.mh:K.h,K.h}if(!S)return;var c,d=K.transition==="none"?0:K.speed;A.remove(),A=Z(X,"LoadedContent").append(b),A.hide().appendTo(B.show()).css({width:g(),overflow:K.scrolling?"auto":"hidden"}).css({height:h()}).prependTo(t),B.hide(),a(R).css({"float":"none"}),o&&a("select").not(r.find("select")).filter(function(){return this.style.visibility!=="hidden"}).css({visibility:"hidden"}).one(k,function(){this.style.visibility="inherit"}),c=function(){function q(){n&&r[0].style.removeAttribute("filter")}var b,c,g=y.length,h,i="frameBorder",k="allowTransparency",l,o,p;if(!S)return;l=function(){clearTimeout(V),C.hide(),bc(j,K.onComplete)},n&&R&&A.fadeIn(100),D.html(K.title).add(A).show();if(g>1){typeof K.current=="string"&&E.html(K.current.replace("{current}",Q+1).replace("{total}",g)).show(),G[K.loop||Q<g-1?"show":"hide"]().html(K.next),H[K.loop||Q?"show":"hide"]().html(K.previous),K.slideshow&&F.show();if(K.preloading){b=[$(-1),$(1)];while(c=y[b.pop()])o=a.data(c,e).href||c.href,a.isFunction(o)&&(o=o.call(c)),ba(o)&&(p=new Image,p.src=o)}}else J.hide();K.iframe?(h=Z("iframe")[0],i in h&&(h[i]=0),k in h&&(h[k]="true"),h.name=f+ +(new Date),K.fastIframe?l():a(h).one("load",l),h.src=K.href,K.scrolling||(h.scrolling="no"),a(h).addClass(f+"Iframe").appendTo(A).one(m,function(){h.src="//about:blank"})):l(),K.transition==="fade"?r.fadeTo(d,1,q):q()},K.transition==="fade"?r.fadeTo(d,0,function(){W.position(0,c)}):W.position(d,c)},W.load=function(b){var c,d,e=W.prep;T=!0,R=!1,P=y[Q],b||bb(),bc(m),bc(i,K.onLoad),K.h=K.height?_(K.height,"y")-N-L:K.innerHeight&&_(K.innerHeight,"y"),K.w=K.width?_(K.width,"x")-O-M:K.innerWidth&&_(K.innerWidth,"x"),K.mw=K.w,K.mh=K.h,K.maxWidth&&(K.mw=_(K.maxWidth,"x")-O-M,K.mw=K.w&&K.w<K.mw?K.w:K.mw),K.maxHeight&&(K.mh=_(K.maxHeight,"y")-N-L,K.mh=K.h&&K.h<K.mh?K.h:K.mh),c=K.href,V=setTimeout(function(){C.show()},100),K.inline?(Z(X).hide().insertBefore(a(c)[0]).one(m,function(){a(this).replaceWith(A.children())}),e(a(c))):K.iframe?e(" "):K.html?e(K.html):ba(c)?(a(R=new Image).addClass(f+"Photo").error(function(){K.title=!1,e(Z(X,"Error").text("This image could not be loaded"))}).load(function(){var a;R.onload=null,K.scalePhotos&&(d=function(){R.height-=R.height*a,R.width-=R.width*a},K.mw&&R.width>K.mw&&(a=(R.width-K.mw)/R.width,d()),K.mh&&R.height>K.mh&&(a=(R.height-K.mh)/R.height,d())),K.h&&(R.style.marginTop=Math.max(K.h-R.height,0)/2+"px"),y[1]&&(K.loop||y[Q+1])&&(R.style.cursor="pointer",R.onclick=function(){W.next()}),n&&(R.style.msInterpolationMode="bicubic"),setTimeout(function(){e(R)},1)}),setTimeout(function(){R.src=c},1)):c&&B.load(c,K.data,function(b,c,d){e(c==="error"?Z(X,"Error").text("Request unsuccessful: "+d.statusText):a(this).contents())})},W.next=function(){!T&&y[1]&&(K.loop||y[Q+1])&&(Q=$(1),W.load())},W.prev=function(){!T&&y[1]&&(K.loop||Q)&&(Q=$(-1),W.load())},W.close=function(){S&&!U&&(U=!0,S=!1,bc(k,K.onCleanup),z.unbind("."+f+" ."+p),q.fadeTo(200,0),r.stop().fadeTo(300,0,function(){r.add(q).css({opacity:1,cursor:"auto"}).hide(),bc(m),A.remove(),setTimeout(function(){U=!1,bc(l,K.onClosed)},1)}))},W.remove=function(){a([]).add(r).add(q).remove(),r=null,a("."+g).removeData(e).removeClass(g).die()},W.element=function(){return a(P)},W.settings=d})(jQuery,document,this);;/**/(function ($) {Drupal.behaviors.initColorbox = {  attach: function (context, settings) {    if (!$.isFunction($.colorbox)) {      return;    }    $('.colorbox', context)      .once('init-colorbox')      .colorbox(settings.colorbox);  }};{  $(document).bind('cbox_complete', function () {    Drupal.attachBehaviors('#cboxLoadedContent');  });}})(jQuery);;/**/(function ($) {Drupal.behaviors.initColorboxDefaultStyle = {  attach: function (context, settings) {    $(document).bind('cbox_complete', function () {      // Only run if there is a title.      if ($('#cboxTitle:empty', context).length == false) {        setTimeout(function () { $('#cboxTitle', context).slideUp() }, 1500);        $('#cboxLoadedContent img', context).bind('mouseover', function () {          $('#cboxTitle', context).slideDown();        });        $('#cboxOverlay', context).bind('mouseover', function () {          $('#cboxTitle', context).slideUp();        });      }      else {        $('#cboxTitle', context).hide();      }    });  }};})(jQuery);;/**/(function($, Drupal, undefined){  /**   * When set to enable mediaelement for all audio/video files add it to the page.   */  Drupal.behaviors.mediaelement = {    attach: function(context, settings) {      if (settings.mediaelement !== undefined) {        // @todo Remove anonymous function.        $.each(settings.mediaelement, function(selector, options) {          var opts;          $(selector, context).once('mediaelement', function() {            if (options.controls) {              $(this).mediaelementplayer(options.opts);            }            else {              $(this).mediaelement();            }          });        });      }      // The global option is seperate from the other selectors as it should be      // run after any other selectors.      if (settings.mediaelementAll !== undefined) {        $('video,audio', context).once('mediaelement', function() {          $(this).mediaelementplayer();        });      }    }  };})(jQuery, Drupal);;/**/(function ($) {/** * A progressbar object. Initialized with the given id. Must be inserted into * the DOM afterwards through progressBar.element. * * method is the function which will perform the HTTP request to get the * progress bar state. Either "GET" or "POST". * * e.g. pb = new progressBar('myProgressBar'); *      some_element.appendChild(pb.element); */Drupal.progressBar = function (id, updateCallback, method, errorCallback) {  var pb = this;  this.id = id;  this.method = method || 'GET';  this.updateCallback = updateCallback;  this.errorCallback = errorCallback;  // The WAI-ARIA setting aria-live="polite" will announce changes after users  // have completed their current activity and not interrupt the screen reader.  this.element = $('<div class="progress" aria-live="polite"></div>').attr('id', id);  this.element.html('<div class="bar"><div class="filled"></div></div>' +                    '<div class="percentage"></div>' +                    '<div class="message">&nbsp;</div>');};/** * Set the percentage and status message for the progressbar. */Drupal.progressBar.prototype.setProgress = function (percentage, message) {  if (percentage >= 0 && percentage <= 100) {    $('div.filled', this.element).css('width', percentage + '%');    $('div.percentage', this.element).html(percentage + '%');  }  $('div.message', this.element).html(message);  if (this.updateCallback) {    this.updateCallback(percentage, message, this);  }};/** * Start monitoring progress via Ajax. */Drupal.progressBar.prototype.startMonitoring = function (uri, delay) {  this.delay = delay;  this.uri = uri;  this.sendPing();};/** * Stop monitoring progress via Ajax. */Drupal.progressBar.prototype.stopMonitoring = function () {  clearTimeout(this.timer);  // This allows monitoring to be stopped from within the callback.  this.uri = null;};/** * Request progress data from server. */Drupal.progressBar.prototype.sendPing = function () {  if (this.timer) {    clearTimeout(this.timer);  }  if (this.uri) {    var pb = this;    // When doing a post request, you need non-null data. Otherwise a    // HTTP 411 or HTTP 406 (with Apache mod_security) error may result.    $.ajax({      type: this.method,      url: this.uri,      data: '',      dataType: 'json',      success: function (progress) {        // Display errors.        if (progress.status == 0) {          pb.displayError(progress.data);          return;        }        // Update display.        pb.setProgress(progress.percentage, progress.message);        // Schedule next timer.        pb.timer = setTimeout(function () { pb.sendPing(); }, pb.delay);      },      error: function (xmlhttp) {        pb.displayError(Drupal.ajaxError(xmlhttp, pb.uri));      }    });  }};/** * Display errors on the page. */Drupal.progressBar.prototype.displayError = function (string) {  var error = $('<div class="messages error"></div>').html(string);  $(this.element).before(error).hide();  if (this.errorCallback) {    this.errorCallback(this);  }};})(jQuery);;/**//** * @file * * Implement a modal form. * * @see modal.inc for documentation. * * This javascript relies on the CTools ajax responder. */(function ($) {  // Make sure our objects are defined.  Drupal.CTools = Drupal.CTools || {};  Drupal.CTools.Modal = Drupal.CTools.Modal || {};  /**   * Display the modal   *   * @todo -- document the settings.   */  Drupal.CTools.Modal.show = function(choice) {    var opts = {};    if (choice && typeof choice == 'string' && Drupal.settings[choice]) {      // This notation guarantees we are actually copying it.      $.extend(true, opts, Drupal.settings[choice]);    }    else if (choice) {      $.extend(true, opts, choice);    }    var defaults = {      modalTheme: 'CToolsModalDialog',      throbberTheme: 'CToolsModalThrobber',      animation: 'show',      animationSpeed: 'fast',      modalSize: {        type: 'scale',        width: .8,        height: .8,        addWidth: 0,        addHeight: 0,        // How much to remove from the inner content to make space for the        // theming.        contentRight: 25,        contentBottom: 45      },      modalOptions: {        opacity: .55,        background: '#fff'      },      modalClass: 'default'    };    var settings = {};    $.extend(true, settings, defaults, Drupal.settings.CToolsModal, opts);    if (Drupal.CTools.Modal.currentSettings && Drupal.CTools.Modal.currentSettings != settings) {      Drupal.CTools.Modal.modal.remove();      Drupal.CTools.Modal.modal = null;    }    Drupal.CTools.Modal.currentSettings = settings;    var resize = function(e) {      // When creating the modal, it actually exists only in a theoretical      // place that is not in the DOM. But once the modal exists, it is in the      // DOM so the context must be set appropriately.      var context = e ? document : Drupal.CTools.Modal.modal;      if (Drupal.CTools.Modal.currentSettings.modalSize.type == 'scale') {        var width = $(window).width() * Drupal.CTools.Modal.currentSettings.modalSize.width;        var height = $(window).height() * Drupal.CTools.Modal.currentSettings.modalSize.height;      }      else {        var width = Drupal.CTools.Modal.currentSettings.modalSize.width;        var height = Drupal.CTools.Modal.currentSettings.modalSize.height;      }      // Use the additionol pixels for creating the width and height.      $('div.ctools-modal-content', context).css({        'width': width + Drupal.CTools.Modal.currentSettings.modalSize.addWidth + 'px',        'height': height + Drupal.CTools.Modal.currentSettings.modalSize.addHeight + 'px'      });      $('div.ctools-modal-content .modal-content', context).css({        'width': (width - Drupal.CTools.Modal.currentSettings.modalSize.contentRight) + 'px',        'height': (height - Drupal.CTools.Modal.currentSettings.modalSize.contentBottom) + 'px'      });    }    if (!Drupal.CTools.Modal.modal) {      Drupal.CTools.Modal.modal = $(Drupal.theme(settings.modalTheme));      if (settings.modalSize.type == 'scale') {        $(window).bind('resize', resize);      }    }    resize();    $('span.modal-title', Drupal.CTools.Modal.modal).html(Drupal.CTools.Modal.currentSettings.loadingText);    Drupal.CTools.Modal.modalContent(Drupal.CTools.Modal.modal, settings.modalOptions, settings.animation, settings.animationSpeed, settings.modalClass);    $('#modalContent .modal-content').html(Drupal.theme(settings.throbberTheme)).addClass('ctools-modal-loading');    // Position autocomplete results based on the scroll position of the modal.    $('#modalContent .modal-content').delegate('input.form-autocomplete', 'keyup', function() {      $('#autocomplete').css('top', $(this).position().top + $(this).outerHeight() + $(this).offsetParent().filter('#modal-content').scrollTop());    });  };  /**   * Hide the modal   */  Drupal.CTools.Modal.dismiss = function() {    if (Drupal.CTools.Modal.modal) {      Drupal.CTools.Modal.unmodalContent(Drupal.CTools.Modal.modal);    }  };  /**   * Provide the HTML to create the modal dialog.   */  Drupal.theme.prototype.CToolsModalDialog = function () {    var html = ''    html += '<div id="ctools-modal">'    html += '  <div class="ctools-modal-content">' // panels-modal-content    html += '    <div class="modal-header">';    html += '      <a class="close" href="#">';    html +=          Drupal.CTools.Modal.currentSettings.closeText + Drupal.CTools.Modal.currentSettings.closeImage;    html += '      </a>';    html += '      <span id="modal-title" class="modal-title">&nbsp;</span>';    html += '    </div>';    html += '    <div id="modal-content" class="modal-content">';    html += '    </div>';    html += '  </div>';    html += '</div>';    return html;  }  /**   * Provide the HTML to create the throbber.   */  Drupal.theme.prototype.CToolsModalThrobber = function () {    var html = '';    html += '<div id="modal-throbber">';    html += '  <div class="modal-throbber-wrapper">';    html +=      Drupal.CTools.Modal.currentSettings.throbber;    html += '  </div>';    html += '</div>';    return html;  };  /**   * Figure out what settings string to use to display a modal.   */  Drupal.CTools.Modal.getSettings = function (object) {    var match = $(object).attr('class').match(/ctools-modal-(\S+)/);    if (match) {      return match[1];    }  }  /**   * Click function for modals that can be cached.   */  Drupal.CTools.Modal.clickAjaxCacheLink = function () {    Drupal.CTools.Modal.show(Drupal.CTools.Modal.getSettings(this));    return Drupal.CTools.AJAX.clickAJAXCacheLink.apply(this);  };  /**   * Handler to prepare the modal for the response   */  Drupal.CTools.Modal.clickAjaxLink = function () {    Drupal.CTools.Modal.show(Drupal.CTools.Modal.getSettings(this));    return false;  };  /**   * Submit responder to do an AJAX submit on all modal forms.   */  Drupal.CTools.Modal.submitAjaxForm = function(e) {    var $form = $(this);    var url = $form.attr('action');    setTimeout(function() { Drupal.CTools.AJAX.ajaxSubmit($form, url); }, 1);    return false;  }  /**   * Bind links that will open modals to the appropriate function.   */  Drupal.behaviors.ZZCToolsModal = {    attach: function(context) {      // Bind links      // Note that doing so in this order means that the two classes can be      // used together safely.      /*       * @todo remimplement the warm caching feature       $('a.ctools-use-modal-cache', context).once('ctools-use-modal', function() {         $(this).click(Drupal.CTools.Modal.clickAjaxCacheLink);         Drupal.CTools.AJAX.warmCache.apply(this);       });        */      $('area.ctools-use-modal, a.ctools-use-modal', context).once('ctools-use-modal', function() {        var $this = $(this);        $this.click(Drupal.CTools.Modal.clickAjaxLink);        // Create a drupal ajax object        var element_settings = {};        if ($this.attr('href')) {          element_settings.url = $this.attr('href');          element_settings.event = 'click';          element_settings.progress = { type: 'throbber' };        }        var base = $this.attr('href');        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);      });      // Bind buttons      $('input.ctools-use-modal, button.ctools-use-modal', context).once('ctools-use-modal', function() {        var $this = $(this);        $this.click(Drupal.CTools.Modal.clickAjaxLink);        var button = this;        var element_settings = {};        // AJAX submits specified in this manner automatically submit to the        // normal form action.        element_settings.url = Drupal.CTools.Modal.findURL(this);        if (element_settings.url == '') {          element_settings.url = $(this).closest('form').attr('action');        }        element_settings.event = 'click';        element_settings.setClick = true;        var base = $this.attr('id');        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);        // Make sure changes to settings are reflected in the URL.        $('.' + $(button).attr('id') + '-url').change(function() {          Drupal.ajax[base].options.url = Drupal.CTools.Modal.findURL(button);        });      });      // Bind our custom event to the form submit      $('#modal-content form', context).once('ctools-use-modal', function() {        var $this = $(this);        var element_settings = {};        element_settings.url = $this.attr('action');        element_settings.event = 'submit';        element_settings.progress = { 'type': 'throbber' }        var base = $this.attr('id');        Drupal.ajax[base] = new Drupal.ajax(base, this, element_settings);        Drupal.ajax[base].form = $this;        $('input[type=submit], button', this).click(function(event) {          Drupal.ajax[base].element = this;          this.form.clk = this;          // Stop autocomplete from submitting.          if (Drupal.autocompleteSubmit && !Drupal.autocompleteSubmit()) {            return false;          }          // An empty event means we were triggered via .click() and          // in jquery 1.4 this won't trigger a submit.          // We also have to check jQuery version to prevent          // IE8 + jQuery 1.4.4 to break on other events          // bound to the submit button.          if (jQuery.fn.jquery.substr(0, 3) === '1.4' && typeof event.bubbles === "undefined") {            $(this.form).trigger('submit');            return false;          }        });      });      // Bind a click handler to allow elements with the 'ctools-close-modal'      // class to close the modal.      $('.ctools-close-modal', context).once('ctools-close-modal')        .click(function() {          Drupal.CTools.Modal.dismiss();          return false;        });    }  };  // The following are implementations of AJAX responder commands.  /**   * AJAX responder command to place HTML within the modal.   */  Drupal.CTools.Modal.modal_display = function(ajax, response, status) {    if ($('#modalContent').length == 0) {      Drupal.CTools.Modal.show(Drupal.CTools.Modal.getSettings(ajax.element));    }    $('#modal-title').html(response.title);    // Simulate an actual page load by scrolling to the top after adding the    // content. This is helpful for allowing users to see error messages at the    // top of a form, etc.    $('#modal-content').html(response.output).scrollTop(0);    // Attach behaviors within a modal dialog.    var settings = response.settings || ajax.settings || Drupal.settings;    Drupal.attachBehaviors($('#modalContent'), settings);    if ($('#modal-content').hasClass('ctools-modal-loading')) {      $('#modal-content').removeClass('ctools-modal-loading');    }    else {      // If the modal was already shown, and we are simply replacing its      // content, then focus on the first focusable element in the modal.      // (When first showing the modal, focus will be placed on the close      // button by the show() function called above.)      $('#modal-content :focusable:first').focus();    }  }  /**   * AJAX responder command to dismiss the modal.   */  Drupal.CTools.Modal.modal_dismiss = function(command) {    Drupal.CTools.Modal.dismiss();    $('link.ctools-temporary-css').remove();  }  /**   * Display loading   */  //Drupal.CTools.AJAX.commands.modal_loading = function(command) {  Drupal.CTools.Modal.modal_loading = function(command) {    Drupal.CTools.Modal.modal_display({      output: Drupal.theme(Drupal.CTools.Modal.currentSettings.throbberTheme),      title: Drupal.CTools.Modal.currentSettings.loadingText    });  }  /**   * Find a URL for an AJAX button.   *   * The URL for this gadget will be composed of the values of items by   * taking the ID of this item and adding -url and looking for that   * class. They need to be in the form in order since we will   * concat them all together using '/'.   */  Drupal.CTools.Modal.findURL = function(item) {    var url = '';    var url_class = '.' + $(item).attr('id') + '-url';    $(url_class).each(      function() {        var $this = $(this);        if (url && $this.val()) {          url += '/';        }        url += $this.val();      });    return url;  };  /**   * modalContent   * @param content string to display in the content box   * @param css obj of css attributes   * @param animation (fadeIn, slideDown, show)   * @param speed (valid animation speeds slow, medium, fast or # in ms)   * @param modalClass class added to div#modalContent   */  Drupal.CTools.Modal.modalContent = function(content, css, animation, speed, modalClass) {    // If our animation isn't set, make it just show/pop    if (!animation) {      animation = 'show';    }    else {      // If our animation isn't "fadeIn" or "slideDown" then it always is show      if (animation != 'fadeIn' && animation != 'slideDown') {        animation = 'show';      }    }    if (!speed) {      speed = 'fast';    }    // Build our base attributes and allow them to be overriden    css = jQuery.extend({      position: 'absolute',      left: '0px',      margin: '0px',      background: '#000',      opacity: '.55'    }, css);    // Add opacity handling for IE.    css.filter = 'alpha(opacity=' + (100 * css.opacity) + ')';    content.hide();    // If we already have modalContent, remove it.    if ($('#modalBackdrop').length) $('#modalBackdrop').remove();    if ($('#modalContent').length) $('#modalContent').remove();    // position code lifted from http://www.quirksmode.org/viewport/compatibility.html    if (self.pageYOffset) { // all except Explorer    var wt = self.pageYOffset;    } else if (document.documentElement && document.documentElement.scrollTop) { // Explorer 6 Strict      var wt = document.documentElement.scrollTop;    } else if (document.body) { // all other Explorers      var wt = document.body.scrollTop;    }    // Get our dimensions    // Get the docHeight and (ugly hack) add 50 pixels to make sure we dont have a *visible* border below our div    var docHeight = $(document).height() + 50;    var docWidth = $(document).width();    var winHeight = $(window).height();    var winWidth = $(window).width();    if( docHeight < winHeight ) docHeight = winHeight;    // Create our divs    $('body').append('<div id="modalBackdrop" class="backdrop-' + modalClass + '" style="z-index: 1000; display: none;"></div><div id="modalContent" class="modal-' + modalClass + '" style="z-index: 1001; position: absolute;">' + $(content).html() + '</div>');    // Get a list of the tabbable elements in the modal content.    var getTabbableElements = function () {      var tabbableElements = $('#modalContent :tabbable'),          radioButtons = tabbableElements.filter('input[type="radio"]');      // The list of tabbable elements from jQuery is *almost* right. The      // exception is with groups of radio buttons. The list from jQuery will      // include all radio buttons, when in fact, only the selected radio button      // is tabbable, and if no radio buttons in a group are selected, then only      // the first is tabbable.      if (radioButtons.length > 0) {        // First, build up an index of which groups have an item selected or not.        var anySelected = {};        radioButtons.each(function () {          var name = this.name;          if (typeof anySelected[name] === 'undefined') {            anySelected[name] = radioButtons.filter('input[name="' + name + '"]:checked').length !== 0;          }        });        // Next filter out the radio buttons that aren't really tabbable.        var found = {};        tabbableElements = tabbableElements.filter(function () {          var keep = true;          if (this.type == 'radio') {            if (anySelected[this.name]) {              // Only keep the selected one.              keep = this.checked;            }            else {              // Only keep the first one.              if (found[this.name]) {                keep = false;              }              found[this.name] = true;            }          }          return keep;        });      }      return tabbableElements.get();    };    // Keyboard and focus event handler ensures only modal elements gain focus.    modalEventHandler = function( event ) {      target = null;      if ( event ) { //Mozilla        target = event.target;      } else { //IE        event = window.event;        target = event.srcElement;      }      var parents = $(target).parents().get();      for (var i = 0; i < parents.length; ++i) {        var position = $(parents[i]).css('position');        if (position == 'absolute' || position == 'fixed') {          return true;        }      }      if ($(target).is('#modalContent, body') || $(target).filter('*:visible').parents('#modalContent').length) {        // Allow the event only if target is a visible child node        // of #modalContent.        return true;      }      else {        getTabbableElements()[0].focus();      }      event.preventDefault();    };    $('body').bind( 'focus', modalEventHandler );    $('body').bind( 'keypress', modalEventHandler );    // Keypress handler Ensures you can only TAB to elements within the modal.    // Based on the psuedo-code from WAI-ARIA 1.0 Authoring Practices section    // 3.3.1 "Trapping Focus".    modalTabTrapHandler = function (evt) {      // We only care about the TAB key.      if (evt.which != 9) {        return true;      }      var tabbableElements = getTabbableElements(),          firstTabbableElement = tabbableElements[0],          lastTabbableElement = tabbableElements[tabbableElements.length - 1],          singleTabbableElement = firstTabbableElement == lastTabbableElement,          node = evt.target;      // If this is the first element and the user wants to go backwards, then      // jump to the last element.      if (node == firstTabbableElement && evt.shiftKey) {        if (!singleTabbableElement) {          lastTabbableElement.focus();        }        return false;      }      // If this is the last element and the user wants to go forwards, then      // jump to the first element.      else if (node == lastTabbableElement && !evt.shiftKey) {        if (!singleTabbableElement) {          firstTabbableElement.focus();        }        return false;      }      // If this element isn't in the dialog at all, then jump to the first      // or last element to get the user into the game.      else if ($.inArray(node, tabbableElements) == -1) {        // Make sure the node isn't in another modal (ie. WYSIWYG modal).        var parents = $(node).parents().get();        for (var i = 0; i < parents.length; ++i) {          var position = $(parents[i]).css('position');          if (position == 'absolute' || position == 'fixed') {            return true;          }        }        if (evt.shiftKey) {          lastTabbableElement.focus();        }        else {          firstTabbableElement.focus();        }      }    };    $('body').bind('keydown', modalTabTrapHandler);    // Create our content div, get the dimensions, and hide it    var modalContent = $('#modalContent').css('top','-1000px');    var $modalHeader = modalContent.find('.modal-header');    var mdcTop = wt + ( winHeight / 2 ) - (  modalContent.outerHeight() / 2);    var mdcLeft = ( winWidth / 2 ) - ( modalContent.outerWidth() / 2);    $('#modalBackdrop').css(css).css('top', 0).css('height', docHeight + 'px').css('width', docWidth + 'px').show();    modalContent.css({top: mdcTop + 'px', left: mdcLeft + 'px'}).hide()[animation](speed);    // Bind a click for closing the modalContent    modalContentClose = function(){close(); return false;};    $('.close', $modalHeader).bind('click', modalContentClose);    // Bind a keypress on escape for closing the modalContent    modalEventEscapeCloseHandler = function(event) {      if (event.keyCode == 27) {        close();        return false;      }    };    $(document).bind('keydown', modalEventEscapeCloseHandler);    // Per WAI-ARIA 1.0 Authoring Practices, initial focus should be on the    // close button, but we should save the original focus to restore it after    // the dialog is closed.    var oldFocus = document.activeElement;    $('.close', $modalHeader).focus();    // Close the open modal content and backdrop    function close() {      // Unbind the events      $(window).unbind('resize',  modalContentResize);      $('body').unbind( 'focus', modalEventHandler);      $('body').unbind( 'keypress', modalEventHandler );      $('body').unbind( 'keydown', modalTabTrapHandler );      $('.close', $modalHeader).unbind('click', modalContentClose);      $('body').unbind('keypress', modalEventEscapeCloseHandler);      $(document).trigger('CToolsDetachBehaviors', $('#modalContent'));      // Set our animation parameters and use them      if ( animation == 'fadeIn' ) animation = 'fadeOut';      if ( animation == 'slideDown' ) animation = 'slideUp';      if ( animation == 'show' ) animation = 'hide';      // Close the content      modalContent.hide()[animation](speed);      // Remove the content      $('#modalContent').remove();      $('#modalBackdrop').remove();      // Restore focus to where it was before opening the dialog      $(oldFocus).focus();    };    // Move and resize the modalBackdrop and modalContent on window resize.    modalContentResize = function(){      // Reset the backdrop height/width to get accurate document size.      $('#modalBackdrop').css('height', '').css('width', '');      // Position code lifted from:      // http://www.quirksmode.org/viewport/compatibility.html      if (self.pageYOffset) { // all except Explorer      var wt = self.pageYOffset;      } else if (document.documentElement && document.documentElement.scrollTop) { // Explorer 6 Strict        var wt = document.documentElement.scrollTop;      } else if (document.body) { // all other Explorers        var wt = document.body.scrollTop;      }      // Get our heights      var docHeight = $(document).height();      var docWidth = $(document).width();      var winHeight = $(window).height();      var winWidth = $(window).width();      if( docHeight < winHeight ) docHeight = winHeight;      // Get where we should move content to      var modalContent = $('#modalContent');      var mdcTop = wt + ( winHeight / 2 ) - ( modalContent.outerHeight() / 2);      var mdcLeft = ( winWidth / 2 ) - ( modalContent.outerWidth() / 2);      // Apply the changes      $('#modalBackdrop').css('height', docHeight + 'px').css('width', docWidth + 'px').show();      modalContent.css('top', mdcTop + 'px').css('left', mdcLeft + 'px').show();    };    $(window).bind('resize', modalContentResize);  };  /**   * unmodalContent   * @param content (The jQuery object to remove)   * @param animation (fadeOut, slideUp, show)   * @param speed (valid animation speeds slow, medium, fast or # in ms)   */  Drupal.CTools.Modal.unmodalContent = function(content, animation, speed)  {    // If our animation isn't set, make it just show/pop    if (!animation) { var animation = 'show'; } else {      // If our animation isn't "fade" then it always is show      if (( animation != 'fadeOut' ) && ( animation != 'slideUp')) animation = 'show';    }    // Set a speed if we dont have one    if ( !speed ) var speed = 'fast';    // Unbind the events we bound    $(window).unbind('resize', modalContentResize);    $('body').unbind('focus', modalEventHandler);    $('body').unbind('keypress', modalEventHandler);    $('body').unbind( 'keydown', modalTabTrapHandler );    var $modalContent = $('#modalContent');    var $modalHeader = $modalContent.find('.modal-header');    $('.close', $modalHeader).unbind('click', modalContentClose);    $('body').unbind('keypress', modalEventEscapeCloseHandler);    $(document).trigger('CToolsDetachBehaviors', $modalContent);    // jQuery magic loop through the instances and run the animations or removal.    content.each(function(){      if ( animation == 'fade' ) {        $('#modalContent').fadeOut(speed, function() {          $('#modalBackdrop').fadeOut(speed, function() {            $(this).remove();          });          $(this).remove();        });      } else {        if ( animation == 'slide' ) {          $('#modalContent').slideUp(speed,function() {            $('#modalBackdrop').slideUp(speed, function() {              $(this).remove();            });            $(this).remove();          });        } else {          $('#modalContent').remove();          $('#modalBackdrop').remove();        }      }    });  };$(function() {  Drupal.ajax.prototype.commands.modal_display = Drupal.CTools.Modal.modal_display;  Drupal.ajax.prototype.commands.modal_dismiss = Drupal.CTools.Modal.modal_dismiss;});})(jQuery);;/**//*** Provide the HTML to create the modal dialog.*/Drupal.theme.prototype.ModalFormsPopup = function () {  var html = '';  html += '<div id="ctools-modal" class="popups-box">';  html += '  <div class="ctools-modal-content modal-forms-modal-content">';  html += '    <div class="popups-container">';  html += '      <div class="modal-header popups-title">';  html += '        <span id="modal-title" class="modal-title"></span>';  html += '        <span class="popups-close close">' + Drupal.CTools.Modal.currentSettings.closeText + '</span>';  html += '        <div class="clear-block"></div>';  html += '      </div>';  html += '      <div class="modal-scroll"><div id="modal-content" class="modal-content popups-body"></div></div>';  html += '    </div>';  html += '  </div>';  html += '</div>';  return html;};/**//* * jQuery Cycle Plugin (with Transition Definitions) * Examples and documentation at: http://jquery.malsup.com/cycle/ * Copyright (c) 2007-2010 M. Alsup * Version: 2.88 (08-JUN-2010) * Dual licensed under the MIT and GPL licenses. * http://jquery.malsup.com/license.html * Requires: jQuery v1.2.6 or later */(function($){var ver="2.88";if($.support==undefined){$.support={opacity:!($.browser.msie)};}function debug(s){if($.fn.cycle.debug){log(s);}}function log(){if(window.console&&window.console.log){window.console.log("[cycle] "+Array.prototype.join.call(arguments," "));}}$.fn.cycle=function(options,arg2){var o={s:this.selector,c:this.context};if(this.length===0&&options!="stop"){if(!$.isReady&&o.s){log("DOM not ready, queuing slideshow");$(function(){$(o.s,o.c).cycle(options,arg2);});return this;}log("terminating; zero elements found by selector"+($.isReady?"":" (DOM not ready)"));return this;}return this.each(function(){var opts=handleArguments(this,options,arg2);if(opts===false){return;}opts.updateActivePagerLink=opts.updateActivePagerLink||$.fn.cycle.updateActivePagerLink;if(this.cycleTimeout){clearTimeout(this.cycleTimeout);}this.cycleTimeout=this.cyclePause=0;var $cont=$(this);var $slides=opts.slideExpr?$(opts.slideExpr,this):$cont.children();var els=$slides.get();if(els.length<2){log("terminating; too few slides: "+els.length);return;}var opts2=buildOptions($cont,$slides,els,opts,o);if(opts2===false){return;}var startTime=opts2.continuous?10:getTimeout(els[opts2.currSlide],els[opts2.nextSlide],opts2,!opts2.rev);if(startTime){startTime+=(opts2.delay||0);if(startTime<10){startTime=10;}debug("first timeout: "+startTime);this.cycleTimeout=setTimeout(function(){go(els,opts2,0,(!opts2.rev&&!opts.backwards));},startTime);}});};function handleArguments(cont,options,arg2){if(cont.cycleStop==undefined){cont.cycleStop=0;}if(options===undefined||options===null){options={};}if(options.constructor==String){switch(options){case"destroy":case"stop":var opts=$(cont).data("cycle.opts");if(!opts){return false;}cont.cycleStop++;if(cont.cycleTimeout){clearTimeout(cont.cycleTimeout);}cont.cycleTimeout=0;$(cont).removeData("cycle.opts");if(options=="destroy"){destroy(opts);}return false;case"toggle":cont.cyclePause=(cont.cyclePause===1)?0:1;checkInstantResume(cont.cyclePause,arg2,cont);return false;case"pause":cont.cyclePause=1;return false;case"resume":cont.cyclePause=0;checkInstantResume(false,arg2,cont);return false;case"prev":case"next":var opts=$(cont).data("cycle.opts");if(!opts){log('options not found, "prev/next" ignored');return false;}$.fn.cycle[options](opts);return false;default:options={fx:options};}return options;}else{if(options.constructor==Number){var num=options;options=$(cont).data("cycle.opts");if(!options){log("options not found, can not advance slide");return false;}if(num<0||num>=options.elements.length){log("invalid slide index: "+num);return false;}options.nextSlide=num;if(cont.cycleTimeout){clearTimeout(cont.cycleTimeout);cont.cycleTimeout=0;}if(typeof arg2=="string"){options.oneTimeFx=arg2;}go(options.elements,options,1,num>=options.currSlide);return false;}}return options;function checkInstantResume(isPaused,arg2,cont){if(!isPaused&&arg2===true){var options=$(cont).data("cycle.opts");if(!options){log("options not found, can not resume");return false;}if(cont.cycleTimeout){clearTimeout(cont.cycleTimeout);cont.cycleTimeout=0;}go(options.elements,options,1,(!opts.rev&&!opts.backwards));}}}function removeFilter(el,opts){if(!$.support.opacity&&opts.cleartype&&el.style.filter){try{el.style.removeAttribute("filter");}catch(smother){}}}function destroy(opts){if(opts.next){$(opts.next).unbind(opts.prevNextEvent);}if(opts.prev){$(opts.prev).unbind(opts.prevNextEvent);}if(opts.pager||opts.pagerAnchorBuilder){$.each(opts.pagerAnchors||[],function(){this.unbind().remove();});}opts.pagerAnchors=null;if(opts.destroy){opts.destroy(opts);}}function buildOptions($cont,$slides,els,options,o){var opts=$.extend({},$.fn.cycle.defaults,options||{},$.metadata?$cont.metadata():$.meta?$cont.data():{});if(opts.autostop){opts.countdown=opts.autostopCount||els.length;}var cont=$cont[0];$cont.data("cycle.opts",opts);opts.$cont=$cont;opts.stopCount=cont.cycleStop;opts.elements=els;opts.before=opts.before?[opts.before]:[];opts.after=opts.after?[opts.after]:[];opts.after.unshift(function(){opts.busy=0;});if(!$.support.opacity&&opts.cleartype){opts.after.push(function(){removeFilter(this,opts);});}if(opts.continuous){opts.after.push(function(){go(els,opts,0,(!opts.rev&&!opts.backwards));});}saveOriginalOpts(opts);if(!$.support.opacity&&opts.cleartype&&!opts.cleartypeNoBg){clearTypeFix($slides);}if($cont.css("position")=="static"){$cont.css("position","relative");}if(opts.width){$cont.width(opts.width);}if(opts.height&&opts.height!="auto"){$cont.height(opts.height);}if(opts.startingSlide){opts.startingSlide=parseInt(opts.startingSlide);}else{if(opts.backwards){opts.startingSlide=els.length-1;}}if(opts.random){opts.randomMap=[];for(var i=0;i<els.length;i++){opts.randomMap.push(i);}opts.randomMap.sort(function(a,b){return Math.random()-0.5;});opts.randomIndex=1;opts.startingSlide=opts.randomMap[1];}else{if(opts.startingSlide>=els.length){opts.startingSlide=0;}}opts.currSlide=opts.startingSlide||0;var first=opts.startingSlide;$slides.css({position:"absolute",top:0,left:0}).hide().each(function(i){var z;if(opts.backwards){z=first?i<=first?els.length+(i-first):first-i:els.length-i;}else{z=first?i>=first?els.length-(i-first):first-i:els.length-i;}$(this).css("z-index",z);});$(els[first]).css("opacity",1).show();removeFilter(els[first],opts);if(opts.fit&&opts.width){$slides.width(opts.width);}if(opts.fit&&opts.height&&opts.height!="auto"){$slides.height(opts.height);}var reshape=opts.containerResize&&!$cont.innerHeight();if(reshape){var maxw=0,maxh=0;for(var j=0;j<els.length;j++){var $e=$(els[j]),e=$e[0],w=$e.outerWidth(),h=$e.outerHeight();if(!w){w=e.offsetWidth||e.width||$e.attr("width");}if(!h){h=e.offsetHeight||e.height||$e.attr("height");}maxw=w>maxw?w:maxw;maxh=h>maxh?h:maxh;}if(maxw>0&&maxh>0){$cont.css({width:maxw+"px",height:maxh+"px"});}}if(opts.pause){$cont.hover(function(){this.cyclePause++;},function(){this.cyclePause--;});}if(supportMultiTransitions(opts)===false){return false;}var requeue=false;options.requeueAttempts=options.requeueAttempts||0;$slides.each(function(){var $el=$(this);this.cycleH=(opts.fit&&opts.height)?opts.height:($el.height()||this.offsetHeight||this.height||$el.attr("height")||0);this.cycleW=(opts.fit&&opts.width)?opts.width:($el.width()||this.offsetWidth||this.width||$el.attr("width")||0);if($el.is("img")){var loadingIE=($.browser.msie&&this.cycleW==28&&this.cycleH==30&&!this.complete);var loadingFF=($.browser.mozilla&&this.cycleW==34&&this.cycleH==19&&!this.complete);var loadingOp=($.browser.opera&&((this.cycleW==42&&this.cycleH==19)||(this.cycleW==37&&this.cycleH==17))&&!this.complete);var loadingOther=(this.cycleH==0&&this.cycleW==0&&!this.complete);if(loadingIE||loadingFF||loadingOp||loadingOther){if(o.s&&opts.requeueOnImageNotLoaded&&++options.requeueAttempts<100){log(options.requeueAttempts," - img slide not loaded, requeuing slideshow: ",this.src,this.cycleW,this.cycleH);setTimeout(function(){$(o.s,o.c).cycle(options);},opts.requeueTimeout);requeue=true;return false;}else{log("could not determine size of image: "+this.src,this.cycleW,this.cycleH);}}}return true;});if(requeue){return false;}opts.cssBefore=opts.cssBefore||{};opts.animIn=opts.animIn||{};opts.animOut=opts.animOut||{};$slides.not(":eq("+first+")").css(opts.cssBefore);if(opts.cssFirst){$($slides[first]).css(opts.cssFirst);}if(opts.timeout){opts.timeout=parseInt(opts.timeout);if(opts.speed.constructor==String){opts.speed=$.fx.speeds[opts.speed]||parseInt(opts.speed);}if(!opts.sync){opts.speed=opts.speed/2;}var buffer=opts.fx=="shuffle"?500:250;while((opts.timeout-opts.speed)<buffer){opts.timeout+=opts.speed;}}if(opts.easing){opts.easeIn=opts.easeOut=opts.easing;}if(!opts.speedIn){opts.speedIn=opts.speed;}if(!opts.speedOut){opts.speedOut=opts.speed;}opts.slideCount=els.length;opts.currSlide=opts.lastSlide=first;if(opts.random){if(++opts.randomIndex==els.length){opts.randomIndex=0;}opts.nextSlide=opts.randomMap[opts.randomIndex];}else{if(opts.backwards){opts.nextSlide=opts.startingSlide==0?(els.length-1):opts.startingSlide-1;}else{opts.nextSlide=opts.startingSlide>=(els.length-1)?0:opts.startingSlide+1;}}if(!opts.multiFx){var init=$.fn.cycle.transitions[opts.fx];if($.isFunction(init)){init($cont,$slides,opts);}else{if(opts.fx!="custom"&&!opts.multiFx){log("unknown transition: "+opts.fx,"; slideshow terminating");return false;}}}var e0=$slides[first];if(opts.before.length){opts.before[0].apply(e0,[e0,e0,opts,true]);}if(opts.after.length>1){opts.after[1].apply(e0,[e0,e0,opts,true]);}if(opts.next){$(opts.next).bind(opts.prevNextEvent,function(){return advance(opts,opts.rev?-1:1);});}if(opts.prev){$(opts.prev).bind(opts.prevNextEvent,function(){return advance(opts,opts.rev?1:-1);});}if(opts.pager||opts.pagerAnchorBuilder){buildPager(els,opts);}exposeAddSlide(opts,els);return opts;}function saveOriginalOpts(opts){opts.original={before:[],after:[]};opts.original.cssBefore=$.extend({},opts.cssBefore);opts.original.cssAfter=$.extend({},opts.cssAfter);opts.original.animIn=$.extend({},opts.animIn);opts.original.animOut=$.extend({},opts.animOut);$.each(opts.before,function(){opts.original.before.push(this);});$.each(opts.after,function(){opts.original.after.push(this);});}function supportMultiTransitions(opts){var i,tx,txs=$.fn.cycle.transitions;if(opts.fx.indexOf(",")>0){opts.multiFx=true;opts.fxs=opts.fx.replace(/\s*/g,"").split(",");for(i=0;i<opts.fxs.length;i++){var fx=opts.fxs[i];tx=txs[fx];if(!tx||!txs.hasOwnProperty(fx)||!$.isFunction(tx)){log("discarding unknown transition: ",fx);opts.fxs.splice(i,1);i--;}}if(!opts.fxs.length){log("No valid transitions named; slideshow terminating.");return false;}}else{if(opts.fx=="all"){opts.multiFx=true;opts.fxs=[];for(p in txs){tx=txs[p];if(txs.hasOwnProperty(p)&&$.isFunction(tx)){opts.fxs.push(p);}}}}if(opts.multiFx&&opts.randomizeEffects){var r1=Math.floor(Math.random()*20)+30;for(i=0;i<r1;i++){var r2=Math.floor(Math.random()*opts.fxs.length);opts.fxs.push(opts.fxs.splice(r2,1)[0]);}debug("randomized fx sequence: ",opts.fxs);}return true;}function exposeAddSlide(opts,els){opts.addSlide=function(newSlide,prepend){var $s=$(newSlide),s=$s[0];if(!opts.autostopCount){opts.countdown++;}els[prepend?"unshift":"push"](s);if(opts.els){opts.els[prepend?"unshift":"push"](s);}opts.slideCount=els.length;$s.css("position","absolute");$s[prepend?"prependTo":"appendTo"](opts.$cont);if(prepend){opts.currSlide++;opts.nextSlide++;}if(!$.support.opacity&&opts.cleartype&&!opts.cleartypeNoBg){clearTypeFix($s);}if(opts.fit&&opts.width){$s.width(opts.width);}if(opts.fit&&opts.height&&opts.height!="auto"){$slides.height(opts.height);}s.cycleH=(opts.fit&&opts.height)?opts.height:$s.height();s.cycleW=(opts.fit&&opts.width)?opts.width:$s.width();$s.css(opts.cssBefore);if(opts.pager||opts.pagerAnchorBuilder){$.fn.cycle.createPagerAnchor(els.length-1,s,$(opts.pager),els,opts);}if($.isFunction(opts.onAddSlide)){opts.onAddSlide($s);}else{$s.hide();}};}$.fn.cycle.resetState=function(opts,fx){fx=fx||opts.fx;opts.before=[];opts.after=[];opts.cssBefore=$.extend({},opts.original.cssBefore);opts.cssAfter=$.extend({},opts.original.cssAfter);opts.animIn=$.extend({},opts.original.animIn);opts.animOut=$.extend({},opts.original.animOut);opts.fxFn=null;$.each(opts.original.before,function(){opts.before.push(this);});$.each(opts.original.after,function(){opts.after.push(this);});var init=$.fn.cycle.transitions[fx];if($.isFunction(init)){init(opts.$cont,$(opts.elements),opts);}};function go(els,opts,manual,fwd){if(manual&&opts.busy&&opts.manualTrump){debug("manualTrump in go(), stopping active transition");$(els).stop(true,true);opts.busy=false;}if(opts.busy){debug("transition active, ignoring new tx request");return;}var p=opts.$cont[0],curr=els[opts.currSlide],next=els[opts.nextSlide];if(p.cycleStop!=opts.stopCount||p.cycleTimeout===0&&!manual){return;}if(!manual&&!p.cyclePause&&!opts.bounce&&((opts.autostop&&(--opts.countdown<=0))||(opts.nowrap&&!opts.random&&opts.nextSlide<opts.currSlide))){if(opts.end){opts.end(opts);}return;}var changed=false;if((manual||!p.cyclePause)&&(opts.nextSlide!=opts.currSlide)){changed=true;var fx=opts.fx;curr.cycleH=curr.cycleH||$(curr).height();curr.cycleW=curr.cycleW||$(curr).width();next.cycleH=next.cycleH||$(next).height();next.cycleW=next.cycleW||$(next).width();if(opts.multiFx){if(opts.lastFx==undefined||++opts.lastFx>=opts.fxs.length){opts.lastFx=0;}fx=opts.fxs[opts.lastFx];opts.currFx=fx;}if(opts.oneTimeFx){fx=opts.oneTimeFx;opts.oneTimeFx=null;}$.fn.cycle.resetState(opts,fx);if(opts.before.length){$.each(opts.before,function(i,o){if(p.cycleStop!=opts.stopCount){return;}o.apply(next,[curr,next,opts,fwd]);});}var after=function(){$.each(opts.after,function(i,o){if(p.cycleStop!=opts.stopCount){return;}o.apply(next,[curr,next,opts,fwd]);});};debug("tx firing; currSlide: "+opts.currSlide+"; nextSlide: "+opts.nextSlide);opts.busy=1;if(opts.fxFn){opts.fxFn(curr,next,opts,after,fwd,manual&&opts.fastOnEvent);}else{if($.isFunction($.fn.cycle[opts.fx])){$.fn.cycle[opts.fx](curr,next,opts,after,fwd,manual&&opts.fastOnEvent);}else{$.fn.cycle.custom(curr,next,opts,after,fwd,manual&&opts.fastOnEvent);}}}if(changed||opts.nextSlide==opts.currSlide){opts.lastSlide=opts.currSlide;if(opts.random){opts.currSlide=opts.nextSlide;if(++opts.randomIndex==els.length){opts.randomIndex=0;}opts.nextSlide=opts.randomMap[opts.randomIndex];if(opts.nextSlide==opts.currSlide){opts.nextSlide=(opts.currSlide==opts.slideCount-1)?0:opts.currSlide+1;}}else{if(opts.backwards){var roll=(opts.nextSlide-1)<0;if(roll&&opts.bounce){opts.backwards=!opts.backwards;opts.nextSlide=1;opts.currSlide=0;}else{opts.nextSlide=roll?(els.length-1):opts.nextSlide-1;opts.currSlide=roll?0:opts.nextSlide+1;}}else{var roll=(opts.nextSlide+1)==els.length;if(roll&&opts.bounce){opts.backwards=!opts.backwards;opts.nextSlide=els.length-2;opts.currSlide=els.length-1;}else{opts.nextSlide=roll?0:opts.nextSlide+1;opts.currSlide=roll?els.length-1:opts.nextSlide-1;}}}}if(changed&&opts.pager){opts.updateActivePagerLink(opts.pager,opts.currSlide,opts.activePagerClass);}var ms=0;if(opts.timeout&&!opts.continuous){ms=getTimeout(els[opts.currSlide],els[opts.nextSlide],opts,fwd);}else{if(opts.continuous&&p.cyclePause){ms=10;}}if(ms>0){p.cycleTimeout=setTimeout(function(){go(els,opts,0,(!opts.rev&&!opts.backwards));},ms);}}$.fn.cycle.updateActivePagerLink=function(pager,currSlide,clsName){$(pager).each(function(){$(this).children().removeClass(clsName).eq(currSlide).addClass(clsName);});};function getTimeout(curr,next,opts,fwd){if(opts.timeoutFn){var t=opts.timeoutFn.call(curr,curr,next,opts,fwd);while((t-opts.speed)<250){t+=opts.speed;}debug("calculated timeout: "+t+"; speed: "+opts.speed);if(t!==false){return t;}}return opts.timeout;}$.fn.cycle.next=function(opts){advance(opts,opts.rev?-1:1);};$.fn.cycle.prev=function(opts){advance(opts,opts.rev?1:-1);};function advance(opts,val){var els=opts.elements;var p=opts.$cont[0],timeout=p.cycleTimeout;if(timeout){clearTimeout(timeout);p.cycleTimeout=0;}if(opts.random&&val<0){opts.randomIndex--;if(--opts.randomIndex==-2){opts.randomIndex=els.length-2;}else{if(opts.randomIndex==-1){opts.randomIndex=els.length-1;}}opts.nextSlide=opts.randomMap[opts.randomIndex];}else{if(opts.random){opts.nextSlide=opts.randomMap[opts.randomIndex];}else{opts.nextSlide=opts.currSlide+val;if(opts.nextSlide<0){if(opts.nowrap){return false;}opts.nextSlide=els.length-1;}else{if(opts.nextSlide>=els.length){if(opts.nowrap){return false;}opts.nextSlide=0;}}}}var cb=opts.onPrevNextEvent||opts.prevNextClick;if($.isFunction(cb)){cb(val>0,opts.nextSlide,els[opts.nextSlide]);}go(els,opts,1,val>=0);return false;}function buildPager(els,opts){var $p=$(opts.pager);$.each(els,function(i,o){$.fn.cycle.createPagerAnchor(i,o,$p,els,opts);});opts.updateActivePagerLink(opts.pager,opts.startingSlide,opts.activePagerClass);}$.fn.cycle.createPagerAnchor=function(i,el,$p,els,opts){var a;if($.isFunction(opts.pagerAnchorBuilder)){a=opts.pagerAnchorBuilder(i,el);debug("pagerAnchorBuilder("+i+", el) returned: "+a);}else{a='<a href="#">'+(i+1)+"</a>";}if(!a){return;}var $a=$(a);if($a.parents("body").length===0){var arr=[];if($p.length>1){$p.each(function(){var $clone=$a.clone(true);$(this).append($clone);arr.push($clone[0]);});$a=$(arr);}else{$a.appendTo($p);}}opts.pagerAnchors=opts.pagerAnchors||[];opts.pagerAnchors.push($a);$a.bind(opts.pagerEvent,function(e){e.preventDefault();opts.nextSlide=i;var p=opts.$cont[0],timeout=p.cycleTimeout;if(timeout){clearTimeout(timeout);p.cycleTimeout=0;}var cb=opts.onPagerEvent||opts.pagerClick;if($.isFunction(cb)){cb(opts.nextSlide,els[opts.nextSlide]);}go(els,opts,1,opts.currSlide<i);});if(!/^click/.test(opts.pagerEvent)&&!opts.allowPagerClickBubble){$a.bind("click.cycle",function(){return false;});}if(opts.pauseOnPagerHover){$a.hover(function(){opts.$cont[0].cyclePause++;},function(){opts.$cont[0].cyclePause--;});}};$.fn.cycle.hopsFromLast=function(opts,fwd){var hops,l=opts.lastSlide,c=opts.currSlide;if(fwd){hops=c>l?c-l:opts.slideCount-l;}else{hops=c<l?l-c:l+opts.slideCount-c;}return hops;};function clearTypeFix($slides){debug("applying clearType background-color hack");function hex(s){s=parseInt(s).toString(16);return s.length<2?"0"+s:s;}function getBg(e){for(;e&&e.nodeName.toLowerCase()!="html";e=e.parentNode){var v=$.css(e,"background-color");if(v.indexOf("rgb")>=0){var rgb=v.match(/\d+/g);return"#"+hex(rgb[0])+hex(rgb[1])+hex(rgb[2]);}if(v&&v!="transparent"){return v;}}return"#ffffff";}$slides.each(function(){$(this).css("background-color",getBg(this));});}$.fn.cycle.commonReset=function(curr,next,opts,w,h,rev){$(opts.elements).not(curr).hide();opts.cssBefore.opacity=1;opts.cssBefore.display="block";if(w!==false&&next.cycleW>0){opts.cssBefore.width=next.cycleW;}if(h!==false&&next.cycleH>0){opts.cssBefore.height=next.cycleH;}opts.cssAfter=opts.cssAfter||{};opts.cssAfter.display="none";$(curr).css("zIndex",opts.slideCount+(rev===true?1:0));$(next).css("zIndex",opts.slideCount+(rev===true?0:1));};$.fn.cycle.custom=function(curr,next,opts,cb,fwd,speedOverride){var $l=$(curr),$n=$(next);var speedIn=opts.speedIn,speedOut=opts.speedOut,easeIn=opts.easeIn,easeOut=opts.easeOut;$n.css(opts.cssBefore);if(speedOverride){if(typeof speedOverride=="number"){speedIn=speedOut=speedOverride;}else{speedIn=speedOut=1;}easeIn=easeOut=null;}var fn=function(){$n.animate(opts.animIn,speedIn,easeIn,cb);};$l.animate(opts.animOut,speedOut,easeOut,function(){if(opts.cssAfter){$l.css(opts.cssAfter);}if(!opts.sync){fn();}});if(opts.sync){fn();}};$.fn.cycle.transitions={fade:function($cont,$slides,opts){$slides.not(":eq("+opts.currSlide+")").css("opacity",0);opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts);opts.cssBefore.opacity=0;});opts.animIn={opacity:1};opts.animOut={opacity:0};opts.cssBefore={top:0,left:0};}};$.fn.cycle.ver=function(){return ver;};$.fn.cycle.defaults={fx:"fade",timeout:4000,timeoutFn:null,continuous:0,speed:1000,speedIn:null,speedOut:null,next:null,prev:null,onPrevNextEvent:null,prevNextEvent:"click.cycle",pager:null,onPagerEvent:null,pagerEvent:"click.cycle",allowPagerClickBubble:false,pagerAnchorBuilder:null,before:null,after:null,end:null,easing:null,easeIn:null,easeOut:null,shuffle:null,animIn:null,animOut:null,cssBefore:null,cssAfter:null,fxFn:null,height:"auto",startingSlide:0,sync:1,random:0,fit:0,containerResize:1,pause:0,pauseOnPagerHover:0,autostop:0,autostopCount:0,delay:0,slideExpr:null,cleartype:!$.support.opacity,cleartypeNoBg:false,nowrap:0,fastOnEvent:0,randomizeEffects:1,rev:0,manualTrump:true,requeueOnImageNotLoaded:true,requeueTimeout:250,activePagerClass:"activeSlide",updateActivePagerLink:null,backwards:false};})(jQuery);/* * jQuery Cycle Plugin Transition Definitions * This script is a plugin for the jQuery Cycle Plugin * Examples and documentation at: http://malsup.com/jquery/cycle/ * Copyright (c) 2007-2010 M. Alsup * Version:	 2.72 * Dual licensed under the MIT and GPL licenses: * http://www.opensource.org/licenses/mit-license.php * http://www.gnu.org/licenses/gpl.html */(function($){$.fn.cycle.transitions.none=function($cont,$slides,opts){opts.fxFn=function(curr,next,opts,after){$(next).show();$(curr).hide();after();};};$.fn.cycle.transitions.scrollUp=function($cont,$slides,opts){$cont.css("overflow","hidden");opts.before.push($.fn.cycle.commonReset);var h=$cont.height();opts.cssBefore={top:h,left:0};opts.cssFirst={top:0};opts.animIn={top:0};opts.animOut={top:-h};};$.fn.cycle.transitions.scrollDown=function($cont,$slides,opts){$cont.css("overflow","hidden");opts.before.push($.fn.cycle.commonReset);var h=$cont.height();opts.cssFirst={top:0};opts.cssBefore={top:-h,left:0};opts.animIn={top:0};opts.animOut={top:h};};$.fn.cycle.transitions.scrollLeft=function($cont,$slides,opts){$cont.css("overflow","hidden");opts.before.push($.fn.cycle.commonReset);var w=$cont.width();opts.cssFirst={left:0};opts.cssBefore={left:w,top:0};opts.animIn={left:0};opts.animOut={left:0-w};};$.fn.cycle.transitions.scrollRight=function($cont,$slides,opts){$cont.css("overflow","hidden");opts.before.push($.fn.cycle.commonReset);var w=$cont.width();opts.cssFirst={left:0};opts.cssBefore={left:-w,top:0};opts.animIn={left:0};opts.animOut={left:w};};$.fn.cycle.transitions.scrollHorz=function($cont,$slides,opts){$cont.css("overflow","hidden").width();opts.before.push(function(curr,next,opts,fwd){$.fn.cycle.commonReset(curr,next,opts);opts.cssBefore.left=fwd?(next.cycleW-1):(1-next.cycleW);opts.animOut.left=fwd?-curr.cycleW:curr.cycleW;});opts.cssFirst={left:0};opts.cssBefore={top:0};opts.animIn={left:0};opts.animOut={top:0};};$.fn.cycle.transitions.scrollVert=function($cont,$slides,opts){$cont.css("overflow","hidden");opts.before.push(function(curr,next,opts,fwd){$.fn.cycle.commonReset(curr,next,opts);opts.cssBefore.top=fwd?(1-next.cycleH):(next.cycleH-1);opts.animOut.top=fwd?curr.cycleH:-curr.cycleH;});opts.cssFirst={top:0};opts.cssBefore={left:0};opts.animIn={top:0};opts.animOut={left:0};};$.fn.cycle.transitions.slideX=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$(opts.elements).not(curr).hide();$.fn.cycle.commonReset(curr,next,opts,false,true);opts.animIn.width=next.cycleW;});opts.cssBefore={left:0,top:0,width:0};opts.animIn={width:"show"};opts.animOut={width:0};};$.fn.cycle.transitions.slideY=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$(opts.elements).not(curr).hide();$.fn.cycle.commonReset(curr,next,opts,true,false);opts.animIn.height=next.cycleH;});opts.cssBefore={left:0,top:0,height:0};opts.animIn={height:"show"};opts.animOut={height:0};};$.fn.cycle.transitions.shuffle=function($cont,$slides,opts){var i,w=$cont.css("overflow","visible").width();$slides.css({left:0,top:0});opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,true,true);});if(!opts.speedAdjusted){opts.speed=opts.speed/2;opts.speedAdjusted=true;}opts.random=0;opts.shuffle=opts.shuffle||{left:-w,top:15};opts.els=[];for(i=0;i<$slides.length;i++){opts.els.push($slides[i]);}for(i=0;i<opts.currSlide;i++){opts.els.push(opts.els.shift());}opts.fxFn=function(curr,next,opts,cb,fwd){var $el=fwd?$(curr):$(next);$(next).css(opts.cssBefore);var count=opts.slideCount;$el.animate(opts.shuffle,opts.speedIn,opts.easeIn,function(){var hops=$.fn.cycle.hopsFromLast(opts,fwd);for(var k=0;k<hops;k++){fwd?opts.els.push(opts.els.shift()):opts.els.unshift(opts.els.pop());}if(fwd){for(var i=0,len=opts.els.length;i<len;i++){$(opts.els[i]).css("z-index",len-i+count);}}else{var z=$(curr).css("z-index");$el.css("z-index",parseInt(z)+1+count);}$el.animate({left:0,top:0},opts.speedOut,opts.easeOut,function(){$(fwd?this:curr).hide();if(cb){cb();}});});};opts.cssBefore={display:"block",opacity:1,top:0,left:0};};$.fn.cycle.transitions.turnUp=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,false);opts.cssBefore.top=next.cycleH;opts.animIn.height=next.cycleH;});opts.cssFirst={top:0};opts.cssBefore={left:0,height:0};opts.animIn={top:0};opts.animOut={height:0};};$.fn.cycle.transitions.turnDown=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,false);opts.animIn.height=next.cycleH;opts.animOut.top=curr.cycleH;});opts.cssFirst={top:0};opts.cssBefore={left:0,top:0,height:0};opts.animOut={height:0};};$.fn.cycle.transitions.turnLeft=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,true);opts.cssBefore.left=next.cycleW;opts.animIn.width=next.cycleW;});opts.cssBefore={top:0,width:0};opts.animIn={left:0};opts.animOut={width:0};};$.fn.cycle.transitions.turnRight=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,true);opts.animIn.width=next.cycleW;opts.animOut.left=curr.cycleW;});opts.cssBefore={top:0,left:0,width:0};opts.animIn={left:0};opts.animOut={width:0};};$.fn.cycle.transitions.zoom=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,false,true);opts.cssBefore.top=next.cycleH/2;opts.cssBefore.left=next.cycleW/2;opts.animIn={top:0,left:0,width:next.cycleW,height:next.cycleH};opts.animOut={width:0,height:0,top:curr.cycleH/2,left:curr.cycleW/2};});opts.cssFirst={top:0,left:0};opts.cssBefore={width:0,height:0};};$.fn.cycle.transitions.fadeZoom=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,false);opts.cssBefore.left=next.cycleW/2;opts.cssBefore.top=next.cycleH/2;opts.animIn={top:0,left:0,width:next.cycleW,height:next.cycleH};});opts.cssBefore={width:0,height:0};opts.animOut={opacity:0};};$.fn.cycle.transitions.blindX=function($cont,$slides,opts){var w=$cont.css("overflow","hidden").width();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts);opts.animIn.width=next.cycleW;opts.animOut.left=curr.cycleW;});opts.cssBefore={left:w,top:0};opts.animIn={left:0};opts.animOut={left:w};};$.fn.cycle.transitions.blindY=function($cont,$slides,opts){var h=$cont.css("overflow","hidden").height();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts);opts.animIn.height=next.cycleH;opts.animOut.top=curr.cycleH;});opts.cssBefore={top:h,left:0};opts.animIn={top:0};opts.animOut={top:h};};$.fn.cycle.transitions.blindZ=function($cont,$slides,opts){var h=$cont.css("overflow","hidden").height();var w=$cont.width();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts);opts.animIn.height=next.cycleH;opts.animOut.top=curr.cycleH;});opts.cssBefore={top:h,left:w};opts.animIn={top:0,left:0};opts.animOut={top:h,left:w};};$.fn.cycle.transitions.growX=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,true);opts.cssBefore.left=this.cycleW/2;opts.animIn={left:0,width:this.cycleW};opts.animOut={left:0};});opts.cssBefore={width:0,top:0};};$.fn.cycle.transitions.growY=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,false);opts.cssBefore.top=this.cycleH/2;opts.animIn={top:0,height:this.cycleH};opts.animOut={top:0};});opts.cssBefore={height:0,left:0};};$.fn.cycle.transitions.curtainX=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,false,true,true);opts.cssBefore.left=next.cycleW/2;opts.animIn={left:0,width:this.cycleW};opts.animOut={left:curr.cycleW/2,width:0};});opts.cssBefore={top:0,width:0};};$.fn.cycle.transitions.curtainY=function($cont,$slides,opts){opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,false,true);opts.cssBefore.top=next.cycleH/2;opts.animIn={top:0,height:next.cycleH};opts.animOut={top:curr.cycleH/2,height:0};});opts.cssBefore={left:0,height:0};};$.fn.cycle.transitions.cover=function($cont,$slides,opts){var d=opts.direction||"left";var w=$cont.css("overflow","hidden").width();var h=$cont.height();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts);if(d=="right"){opts.cssBefore.left=-w;}else{if(d=="up"){opts.cssBefore.top=h;}else{if(d=="down"){opts.cssBefore.top=-h;}else{opts.cssBefore.left=w;}}}});opts.animIn={left:0,top:0};opts.animOut={opacity:1};opts.cssBefore={top:0,left:0};};$.fn.cycle.transitions.uncover=function($cont,$slides,opts){var d=opts.direction||"left";var w=$cont.css("overflow","hidden").width();var h=$cont.height();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,true,true);if(d=="right"){opts.animOut.left=w;}else{if(d=="up"){opts.animOut.top=-h;}else{if(d=="down"){opts.animOut.top=h;}else{opts.animOut.left=-w;}}}});opts.animIn={left:0,top:0};opts.animOut={opacity:1};opts.cssBefore={top:0,left:0};};$.fn.cycle.transitions.toss=function($cont,$slides,opts){var w=$cont.css("overflow","visible").width();var h=$cont.height();opts.before.push(function(curr,next,opts){$.fn.cycle.commonReset(curr,next,opts,true,true,true);if(!opts.animOut.left&&!opts.animOut.top){opts.animOut={left:w*2,top:-h/2,opacity:0};}else{opts.animOut.opacity=0;}});opts.cssBefore={left:0,top:0};opts.animIn={left:0};};$.fn.cycle.transitions.wipe=function($cont,$slides,opts){var w=$cont.css("overflow","hidden").width();var h=$cont.height();opts.cssBefore=opts.cssBefore||{};var clip;if(opts.clip){if(/l2r/.test(opts.clip)){clip="rect(0px 0px "+h+"px 0px)";}else{if(/r2l/.test(opts.clip)){clip="rect(0px "+w+"px "+h+"px "+w+"px)";}else{if(/t2b/.test(opts.clip)){clip="rect(0px "+w+"px 0px 0px)";}else{if(/b2t/.test(opts.clip)){clip="rect("+h+"px "+w+"px "+h+"px 0px)";}else{if(/zoom/.test(opts.clip)){var top=parseInt(h/2);var left=parseInt(w/2);clip="rect("+top+"px "+left+"px "+top+"px "+left+"px)";}}}}}}opts.cssBefore.clip=opts.cssBefore.clip||clip||"rect(0px 0px 0px 0px)";var d=opts.cssBefore.clip.match(/(\d+)/g);var t=parseInt(d[0]),r=parseInt(d[1]),b=parseInt(d[2]),l=parseInt(d[3]);opts.before.push(function(curr,next,opts){if(curr==next){return;}var $curr=$(curr),$next=$(next);$.fn.cycle.commonReset(curr,next,opts,true,true,false);opts.cssAfter.display="block";var step=1,count=parseInt((opts.speedIn/13))-1;(function f(){var tt=t?t-parseInt(step*(t/count)):0;var ll=l?l-parseInt(step*(l/count)):0;var bb=b<h?b+parseInt(step*((h-b)/count||1)):h;var rr=r<w?r+parseInt(step*((w-r)/count||1)):w;$next.css({clip:"rect("+tt+"px "+rr+"px "+bb+"px "+ll+"px)"});(step++<=count)?setTimeout(f,13):$curr.css("display","none");})();});opts.cssBefore={display:"block",opacity:1,top:0,left:0};opts.animIn={left:0};opts.animOut={left:0};};})(jQuery);;/**//** *  @file *  A simple jQuery Cycle Div Slideshow Rotator. *//** * This will set our initial behavior, by starting up each individual slideshow. */(function ($) {  Drupal.behaviors.viewsSlideshowCycle = {    attach: function (context) {      $('.views_slideshow_cycle_main:not(.viewsSlideshowCycle-processed)', context).addClass('viewsSlideshowCycle-processed').each(function() {        var fullId = '#' + $(this).attr('id');        var settings = Drupal.settings.viewsSlideshowCycle[fullId];        settings.targetId = '#' + $(fullId + " :first").attr('id');        settings.slideshowId = settings.targetId.replace('#views_slideshow_cycle_teaser_section_', '');        // Pager after function.        var pager_after_fn = function(curr, next, opts) {          // Need to do some special handling on first load.          var slideNum = opts.currSlide;          if (typeof settings.processedAfter == 'undefined' || !settings.processedAfter) {            settings.processedAfter = 1;            slideNum = (typeof settings.opts.startingSlide == 'undefined') ? 0 : settings.opts.startingSlide;          }          if (settings.pause_after_slideshow) {            opts.counter += 1;            if (opts.counter == settings.num_divs + 1) {              opts.counter = 1;              Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId, "force": true });            }          }          Drupal.viewsSlideshow.action({ "action": 'transitionEnd', "slideshowID": settings.slideshowId, "slideNum": slideNum });        }        // Pager before function.        var pager_before_fn = function(curr, next, opts) {          $(document).trigger('drupal:views_slideshow_cycle:before', {            curr: curr, next: next, opts: opts, settings: settings          });          var slideNum = opts.nextSlide;          // Remember last slide.          if (settings.remember_slide) {            createCookie(settings.vss_id, slideNum, settings.remember_slide_days);          }          // Make variable height.          if (!settings.fixed_height) {            //get the height of the current slide            var $ht = $(next).height();            //set the container's height to that of the current slide            $(next).parent().animate({height: $ht});          }          // Need to do some special handling on first load.          if (typeof settings.processedBefore == 'undefined' || !settings.processedBefore) {            settings.processedBefore = 1;            slideNum = (typeof opts.startingSlide == 'undefined') ? 0 : opts.startingSlide;          }          Drupal.viewsSlideshow.action({ "action": 'transitionBegin', "slideshowID": settings.slideshowId, "slideNum": slideNum });        }        settings.loaded = false;        settings.opts = {          speed:settings.speed,          timeout:settings.timeout,          delay:settings.delay,          sync:settings.sync,          random:settings.random,          nowrap:settings.nowrap,          pause_after_slideshow:settings.pause_after_slideshow,          counter:0,          after:pager_after_fn,          before:pager_before_fn,          cleartype:(settings.cleartype)? true : false,          cleartypeNoBg:(settings.cleartypenobg)? true : false        }        // Set the starting slide if we are supposed to remember the slide        if (settings.remember_slide) {          var startSlide = readCookie(settings.vss_id);          if (startSlide == null) {            startSlide = 0;          }          settings.opts.startingSlide = parseInt(startSlide);        }        if (settings.effect == 'none') {          settings.opts.speed = 1;        }        else {          settings.opts.fx = settings.effect;        }        // Take starting item from fragment.        var hash = location.hash;        if (hash) {          var hash = hash.replace('#', '');          var aHash = hash.split(';');          var aHashLen = aHash.length;          // Loop through all the possible starting points.          for (var i = 0; i < aHashLen; i++) {            // Split the hash into two parts. One part is the slideshow id the            // other is the slide number.            var initialInfo = aHash[i].split(':');            // The id in the hash should match our slideshow.            // The slide number chosen shouldn't be larger than the number of            // slides we have.            if (settings.slideshowId == initialInfo[0] && settings.num_divs > initialInfo[1]) {              settings.opts.startingSlide = parseInt(initialInfo[1]);            }          }        }        // Pause on hover.        if (settings.pause) {          var mouseIn = function() {            Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId });          }          var mouseOut = function() {            Drupal.viewsSlideshow.action({ "action": 'play', "slideshowID": settings.slideshowId });          }          if (jQuery.fn.hoverIntent) {            $('#views_slideshow_cycle_teaser_section_' + settings.vss_id).hoverIntent(mouseIn, mouseOut);          }          else {            $('#views_slideshow_cycle_teaser_section_' + settings.vss_id).hover(mouseIn, mouseOut);          }        }        // Play on hover.        if (settings.play_on_hover) {          var mouseIn = function() {            Drupal.viewsSlideshow.action({ "action": 'play', "slideshowID": settings.slideshowId, "force": true });          }          var mouseOut = function() {            Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId });          }          if (jQuery.fn.hoverIntent) {            $('#views_slideshow_cycle_teaser_section_' + settings.vss_id).hoverIntent(mouseIn, mouseOut);          }          else {            $('#views_slideshow_cycle_teaser_section_' + settings.vss_id).hover(mouseIn, mouseOut);          }        }        // Pause on clicking of the slide.        if (settings.pause_on_click) {          $('#views_slideshow_cycle_teaser_section_' + settings.vss_id).click(function() {            Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId, "force": true });          });        }        if (typeof JSON != 'undefined') {          var advancedOptions = JSON.parse(settings.advanced_options);          for (var option in advancedOptions) {            switch(option) {              // Standard Options              case "activePagerClass":              case "allowPagerClickBubble":              case "autostop":              case "autostopCount":              case "backwards":              case "bounce":              case "cleartype":              case "cleartypeNoBg":              case "containerResize":              case "continuous":              case "delay":              case "easeIn":              case "easeOut":              case "easing":              case "fastOnEvent":              case "fit":              case "fx":              case "manualTrump":              case "metaAttr":              case "next":              case "nowrap":              case "pager":              case "pagerEvent":              case "pause":              case "pauseOnPagerHover":              case "prev":              case "prevNextEvent":              case "random":              case "randomizeEffects":              case "requeueOnImageNotLoaded":              case "requeueTimeout":              case "rev":              case "slideExpr":              case "slideResize":              case "speed":              case "speedIn":              case "speedOut":              case "startingSlide":              case "sync":              case "timeout":                var optionValue = advancedOptions[option];                optionValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(optionValue);                settings.opts[option] = optionValue;                break;              // If width is set we need to disable resizing.              case "width":                var optionValue = advancedOptions["width"];                optionValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(optionValue);                settings.opts["width"] = optionValue;                settings.opts["containerResize"] = 0;                break;              // If height is set we need to set fixed_height to true.              case "height":                var optionValue = advancedOptions["height"];                optionValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(optionValue);                settings.opts["height"] = optionValue;                settings.fixed_height = 1;                break;              // These process options that look like {top:50, bottom:20}              case "animIn":              case "animInDelay":              case "animOut":              case "animOutDelay":              case "cssBefore":              case "cssAfter":              case "shuffle":                var cssValue = advancedOptions[option];                cssValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(cssValue);                settings.opts[option] = eval('(' + cssValue + ')');                break;              // These options have their own functions.              case "after":                var afterValue = advancedOptions[option];                afterValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(afterValue);                // transition callback (scope set to element that was shown): function(currSlideElement, nextSlideElement, options, forwardFlag)                settings.opts[option] = function(currSlideElement, nextSlideElement, options, forwardFlag) {                  pager_after_fn(currSlideElement, nextSlideElement, options);                  eval(afterValue);                }                break;              case "before":                var beforeValue = advancedOptions[option];                beforeValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(beforeValue);                // transition callback (scope set to element to be shown):     function(currSlideElement, nextSlideElement, options, forwardFlag)                settings.opts[option] = function(currSlideElement, nextSlideElement, options, forwardFlag) {                  pager_before_fn(currSlideElement, nextSlideElement, options);                  eval(beforeValue);                }                break;              case "end":                var endValue = advancedOptions[option];                endValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(endValue);                // callback invoked when the slideshow terminates (use with autostop or nowrap options): function(options)                settings.opts[option] = function(options) {                  eval(endValue);                }                break;              case "fxFn":                var fxFnValue = advancedOptions[option];                fxFnValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(fxFnValue);                // function used to control the transition: function(currSlideElement, nextSlideElement, options, afterCalback, forwardFlag)                settings.opts[option] = function(currSlideElement, nextSlideElement, options, afterCalback, forwardFlag) {                  eval(fxFnValue);                }                break;              case "onPagerEvent":                var onPagerEventValue = advancedOptions[option];                onPagerEventValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(onPagerEventValue);                settings.opts[option] = function(zeroBasedSlideIndex, slideElement) {                  eval(onPagerEventValue);                }                break;              case "onPrevNextEvent":                var onPrevNextEventValue = advancedOptions[option];                onPrevNextEventValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(onPrevNextEventValue);                settings.opts[option] = function(isNext, zeroBasedSlideIndex, slideElement) {                  eval(onPrevNextEventValue);                }                break;              case "pagerAnchorBuilder":                var pagerAnchorBuilderValue = advancedOptions[option];                pagerAnchorBuilderValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(pagerAnchorBuilderValue);                // callback fn for building anchor links:  function(index, DOMelement)                settings.opts[option] = function(index, DOMelement) {                  var returnVal = '';                  eval(pagerAnchorBuilderValue);                  return returnVal;                }                break;              case "pagerClick":                var pagerClickValue = advancedOptions[option];                pagerClickValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(pagerClickValue);                // callback fn for pager clicks:    function(zeroBasedSlideIndex, slideElement)                settings.opts[option] = function(zeroBasedSlideIndex, slideElement) {                  eval(pagerClickValue);                }                break;              case "paused":                var pausedValue = advancedOptions[option];                pausedValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(pausedValue);                // undocumented callback when slideshow is paused:    function(cont, opts, byHover)                settings.opts[option] = function(cont, opts, byHover) {                  eval(pausedValue);                }                break;              case "resumed":                var resumedValue = advancedOptions[option];                resumedValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(resumedValue);                // undocumented callback when slideshow is resumed:    function(cont, opts, byHover)                settings.opts[option] = function(cont, opts, byHover) {                  eval(resumedValue);                }                break;              case "timeoutFn":                var timeoutFnValue = advancedOptions[option];                timeoutFnValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(timeoutFnValue);                settings.opts[option] = function(currSlideElement, nextSlideElement, options, forwardFlag) {                  // Set a sane return value unless function overrides it.                  var returnVal = settings.timeout;                  eval(timeoutFnValue);                  return returnVal;                }                break;              case "updateActivePagerLink":                var updateActivePagerLinkValue = advancedOptions[option];                updateActivePagerLinkValue = Drupal.viewsSlideshowCycle.advancedOptionCleanup(updateActivePagerLinkValue);                // callback fn invoked to update the active pager link (adds/removes activePagerClass style)                settings.opts[option] = function(pager, currSlideIndex) {                  eval(updateActivePagerLinkValue);                }                break;            }          }        }        // If selected wait for the images to be loaded.        // otherwise just load the slideshow.        if (settings.wait_for_image_load) {          // For IE/Chrome/Opera we if there are images then we need to make          // sure the images are loaded before starting the slideshow.          settings.totalImages = $(settings.targetId + ' img').length;          if (settings.totalImages) {            settings.loadedImages = 0;            // Add a load event for each image.            $(settings.targetId + ' img').each(function() {              var $imageElement = $(this);              $imageElement.bind('load', function () {                Drupal.viewsSlideshowCycle.imageWait(fullId);              });              // Removing the source and adding it again will fire the load event.              var imgSrc = $imageElement.attr('src');              $imageElement.attr('src', '');              $imageElement.attr('src', imgSrc);            });            // We need to set a timeout so that the slideshow doesn't wait            // indefinitely for all images to load.            setTimeout("Drupal.viewsSlideshowCycle.load('" + fullId + "')", settings.wait_for_image_load_timeout);          }          else {            Drupal.viewsSlideshowCycle.load(fullId);          }        }        else {          Drupal.viewsSlideshowCycle.load(fullId);        }      });    }  };  /**   * Views Slideshow swipe support.   */  Drupal.behaviors.viewsSlideshowSwipe = {    attach: function (context) {      var isTouch = (('ontouchstart' in window) || (navigator.msMaxTouchPoints > 0));      if (isTouch === true && $('.views-slideshow-cycle-main-frame').length) {        var $slider = $('.views-slideshow-cycle-main-frame'),          opts = {            start: {x: 0, y: 0},            end: {x: 0, y: 0},            hdiff: 0,            vdiff: 0,            length: 0,            angle: null,            direction: null,          },          optsReset = $.extend(true, {}, opts),         H_THRESHOLD =  110, // roughly one inch effective resolution on ipad         V_THRESHOLD = 50;        $slider.data('bw', opts)        .bind('touchstart.cycle', function (e) {          var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];          if (e.originalEvent.touches.length == 1) {            var data = $(this).data('bw');            data.start.x = touch.pageX;            data.start.y = touch.pageY;            $(this).data('bw', data);          }        })        .bind('touchend.cycle', function (e) {          var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];          var data = $(this).data('bw');          data.end.x = touch.pageX;          data.end.y = touch.pageY;          $(this).data('bw', data);          if (data.start.x != 0 && data.start.y != 0) {            data.vdiff = data.start.x - data.end.x;            data.hdiff = data.end.y - data.start.y;            if (Math.abs(data.vdiff) == data.start.x && Math.abs(data.hdiff) == data.start.y) {              data.vdiff = 0;              data.hdiff = 0;            }            var length = Math.round(Math.sqrt(Math.pow(data.vdiff,2) + Math.pow(data.hdiff,2)));            var rads = Math.atan2(data.hdiff, data.vdiff);            var angle = Math.round(rads*180/Math.PI);            if (angle < 0) { angle = 360 - Math.abs(angle); }            if (length > H_THRESHOLD && V_THRESHOLD > data.hdiff) {              e.preventDefault();              if (angle > 135 && angle < 225) {                var cyopt = $slider.data('cycle.opts');                if (cyopt.currSlide > 0) {                  $slider.cycle((cyopt.currSlide - 1), 'scrollRight');                }                else {                   $slider.cycle((cyopt.slideCount - 1), 'scrollRight');                }              }              else if (angle > 315 || angle < 45) {                $slider.cycle('next');              }            }          }          data = $.extend(true, {}, optsReset);        });      }    }  };  Drupal.viewsSlideshowCycle = Drupal.viewsSlideshowCycle || {};  // Cleanup the values of advanced options.  Drupal.viewsSlideshowCycle.advancedOptionCleanup = function(value) {    value = $.trim(value);    value = value.replace(/\n/g, '');    if (value.match(/^[\d.]+%$/)) {      // noop    }    else if (!isNaN(parseInt(value))) {      value = parseInt(value);    }    else if (value.toLowerCase() == 'true') {      value = true;    }    else if (value.toLowerCase() == 'false') {      value = false;    }    return value;  }  // This checks to see if all the images have been loaded.  // If they have then it starts the slideshow.  Drupal.viewsSlideshowCycle.imageWait = function(fullId) {    if (++Drupal.settings.viewsSlideshowCycle[fullId].loadedImages == Drupal.settings.viewsSlideshowCycle[fullId].totalImages) {      Drupal.viewsSlideshowCycle.load(fullId);    }  };  // Start the slideshow.  Drupal.viewsSlideshowCycle.load = function (fullId) {    var settings = Drupal.settings.viewsSlideshowCycle[fullId];    // Make sure the slideshow isn't already loaded.    if (!settings.loaded) {      $(settings.targetId).cycle(settings.opts);      $(settings.targetId).parent().parent().addClass('views-slideshow-cycle-processed');      settings.loaded = true;      // Start Paused      if (settings.start_paused) {        Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId, "force": true });      }      // Pause if hidden.      if (settings.pause_when_hidden) {        var checkPause = function(settings) {          // If the slideshow is visible and it is paused then resume.          // otherwise if the slideshow is not visible and it is not paused then          // pause it.          var visible = viewsSlideshowCycleIsVisible(settings.targetId, settings.pause_when_hidden_type, settings.amount_allowed_visible);          if (visible) {            Drupal.viewsSlideshow.action({ "action": 'play', "slideshowID": settings.slideshowId });          }          else {            Drupal.viewsSlideshow.action({ "action": 'pause', "slideshowID": settings.slideshowId });          }        }        // Check when scrolled.        $(window).scroll(function() {         checkPause(settings);        });        // Check when the window is resized.        $(window).resize(function() {          checkPause(settings);        });      }    }  };  Drupal.viewsSlideshowCycle.pause = function (options) {    //Eat TypeError, cycle doesn't handle pause well if options isn't defined.    try{      if (options.pause_in_middle && $.fn.pause) {        $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).pause();      }      else {        $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).cycle('pause');      }    }    catch(e){      if(!e instanceof TypeError){        throw e;      }    }  };  Drupal.viewsSlideshowCycle.play = function (options) {    Drupal.settings.viewsSlideshowCycle['#views_slideshow_cycle_main_' + options.slideshowID].paused = false;    if (options.pause_in_middle && $.fn.resume) {      $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).resume();    }    else {      $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).cycle('resume');    }  };  Drupal.viewsSlideshowCycle.previousSlide = function (options) {    $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).cycle('prev');  };  Drupal.viewsSlideshowCycle.nextSlide = function (options) {    $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).cycle('next');  };  Drupal.viewsSlideshowCycle.goToSlide = function (options) {    $('#views_slideshow_cycle_teaser_section_' + options.slideshowID).cycle(options.slideNum);  };  // Verify that the value is a number.  function IsNumeric(sText) {    var ValidChars = "0123456789";    var IsNumber=true;    var Char;    for (var i=0; i < sText.length && IsNumber == true; i++) {      Char = sText.charAt(i);      if (ValidChars.indexOf(Char) == -1) {        IsNumber = false;      }    }    return IsNumber;  }  /**   * Cookie Handling Functions   */  function createCookie(name,value,days) {    if (days) {      var date = new Date();      date.setTime(date.getTime()+(days*24*60*60*1000));      var expires = "; expires="+date.toGMTString();    }    else {      var expires = "";    }    document.cookie = name+"="+value+expires+"; path=/";  }  function readCookie(name) {    var nameEQ = name + "=";    var ca = document.cookie.split(';');    for(var i=0;i < ca.length;i++) {      var c = ca[i];      while (c.charAt(0)==' ') c = c.substring(1,c.length);      if (c.indexOf(nameEQ) == 0) {        return c.substring(nameEQ.length,c.length);      }    }    return null;  }  function eraseCookie(name) {    createCookie(name,"",-1);  }  /**   * Checks to see if the slide is visible enough.   * elem = element to check.   * type = The way to calculate how much is visible.   * amountVisible = amount that should be visible. Either in percent or px. If   *                it's not defined then all of the slide must be visible.   *   * Returns true or false   */  function viewsSlideshowCycleIsVisible(elem, type, amountVisible) {    // Get the top and bottom of the window;    var docViewTop = $(window).scrollTop();    var docViewBottom = docViewTop + $(window).height();    var docViewLeft = $(window).scrollLeft();    var docViewRight = docViewLeft + $(window).width();    // Get the top, bottom, and height of the slide;    var elemTop = $(elem).offset().top;    var elemHeight = $(elem).height();    var elemBottom = elemTop + elemHeight;    var elemLeft = $(elem).offset().left;    var elemWidth = $(elem).width();    var elemRight = elemLeft + elemWidth;    var elemArea = elemHeight * elemWidth;    // Calculate what's hiding in the slide.    var missingLeft = 0;    var missingRight = 0;    var missingTop = 0;    var missingBottom = 0;    // Find out how much of the slide is missing from the left.    if (elemLeft < docViewLeft) {      missingLeft = docViewLeft - elemLeft;    }    // Find out how much of the slide is missing from the right.    if (elemRight > docViewRight) {      missingRight = elemRight - docViewRight;    }    // Find out how much of the slide is missing from the top.    if (elemTop < docViewTop) {      missingTop = docViewTop - elemTop;    }    // Find out how much of the slide is missing from the bottom.    if (elemBottom > docViewBottom) {      missingBottom = elemBottom - docViewBottom;    }    // If there is no amountVisible defined then check to see if the whole slide    // is visible.    if (type == 'full') {      return ((elemBottom >= docViewTop) && (elemTop <= docViewBottom)      && (elemBottom <= docViewBottom) &&  (elemTop >= docViewTop)      && (elemLeft >= docViewLeft) && (elemRight <= docViewRight)      && (elemLeft <= docViewRight) && (elemRight >= docViewLeft));    }    else if(type == 'vertical') {      var verticalShowing = elemHeight - missingTop - missingBottom;      // If user specified a percentage then find out if the current shown percent      // is larger than the allowed percent.      // Otherwise check to see if the amount of px shown is larger than the      // allotted amount.      if (typeof amountVisible === 'string' && amountVisible.indexOf('%')) {        return (((verticalShowing/elemHeight)*100) >= parseInt(amountVisible));      }      else {        return (verticalShowing >= parseInt(amountVisible));      }    }    else if(type == 'horizontal') {      var horizontalShowing = elemWidth - missingLeft - missingRight;      // If user specified a percentage then find out if the current shown percent      // is larger than the allowed percent.      // Otherwise check to see if the amount of px shown is larger than the      // allotted amount.      if (typeof amountVisible === 'string' && amountVisible.indexOf('%')) {        return (((horizontalShowing/elemWidth)*100) >= parseInt(amountVisible));      }      else {        return (horizontalShowing >= parseInt(amountVisible));      }    }    else if(type == 'area') {      var areaShowing = (elemWidth - missingLeft - missingRight) * (elemHeight - missingTop - missingBottom);      // If user specified a percentage then find out if the current shown percent      // is larger than the allowed percent.      // Otherwise check to see if the amount of px shown is larger than the      // allotted amount.      if (typeof amountVisible === 'string' && amountVisible.indexOf('%')) {        return (((areaShowing/elemArea)*100) >= parseInt(amountVisible));      }      else {        return (areaShowing >= parseInt(amountVisible));      }    }  }})(jQuery);;/**/(function($) {  /**   * saveState   *   * This function stores the state of the page   * (slickgrid, google map and tiny tax block)   * and saves in the corresponding fields in the given form   */  function saveState($form) {    // Parse the tinytax position    var open_tids = [];    if (typeof Drupal.behaviors.tinytax !== 'undefined' &&        typeof Drupal.behaviors.tinytax.getStatus === 'function') {      var result = Drupal.behaviors.tinytax.getStatus();      open_tids = result.open_tids;      $('input[name=citethispage_open_tids]', $form).attr('value', open_tids.join(','));    }    // Get Slickgrid state    if (typeof slickgrid !== 'undefined') {      var state = slickgrid.getGridState();      var json = '';      if (typeof $.toJSON === 'function') {        json = $.toJSON(state);      } else if (typeof JSON.stringify === 'function') {        json = JSON.stringify(state);      }      $('input[name=citethispage_slick_state]', $form).attr('value', json);    }    // Get google maps state    if (typeof Drupal.settings.gm3 !== 'undefined') {      var gmapstate = {};      var json = '';      for (var key in Drupal.settings.gm3.maps) {        gmapstate[key] = Drupal.settings.gm3.maps[key].get_bounds();      }      if (typeof $.toJSON === 'function') {        json = $.toJSON(gmapstate);      } else if (typeof JSON.stringify === 'function') {        json = JSON.stringify(gmapstate);      }      $('input[name=citethispage_gmap_state]', $form).attr('value', json);    }  }  /**   * restoreState   *   * This functions restore the state as stored in settings.   * Note that the tinytax state is restored server side.   */  function restoreState(context) {    // Restore slickgrid    if (typeof slickgrid !== 'undefined' && typeof Drupal.settings.scratchpads_citethispage.slick_state !== 'undefined') {      slickgrid.setGridState(Drupal.settings.scratchpads_citethispage.slick_state);    }    // Restore gmap    if (typeof Drupal.settings.gm3.maps !== 'undefined' && typeof Drupal.settings.scratchpads_citethispage.gmap_state !== 'undefined') {      for (var key in Drupal.settings.gm3.maps) {        if (typeof Drupal.settings.scratchpads_citethispage.gmap_state[key] !== 'undefined') {          Drupal.settings.gm3.maps[key].set_bounds(Drupal.settings.scratchpads_citethispage.gmap_state[key]);        }      }    }    // Redraw clusters    setTimeout(function() {      redrawClusters(context);    }, 500);  }  /**   * redrawClusters   *   * This function changes Google map clusters to use a gradient rather than a background image, as those   * seem to confuse phatomJS PDF rendering   */  function redrawClusters(context){    var cluster_re = /markerclustererplus/;    $('div.gm3-map-wrapper div', context).filter(function() {      return cluster_re.test($(this).css('background-image'));    }).each(function() {      var height = $(this).height();      var width = $(this).width();      $(this).css('border-radius', height > width ? height : width);      if (/m1/.test($(this).css('background-image'))) {        // Blue        $(this).css('background', '-webkit-radial-gradient(center, ellipse cover, rgba(75,160,229,1) 17%,rgba(75,160,229,0.59) 42%,rgba(167,216,244,0) 78%,rgba(170,218,244,0) 79%)');                  } else if (/m2/.test($(this).css('background-image'))) {        // Orange        $(this).css('background', '-webkit-radial-gradient(center, ellipse cover, rgba(229,209,75,1) 17%,rgba(229,209,75,0.59) 42%,rgba(244,227,167,0) 78%,rgba(244,227,170,0) 79%)');      } else {        // Red        $(this).css('background', '-webkit-radial-gradient(center, ellipse cover, rgba(255,57,43,1) 17%,rgba(255,57,43,0.59) 42%,rgba(255,154,157,0) 78%,rgba(255,157,160,0) 79%)');      }    });  }  Drupal.behaviors.scrachpads_citethispage = {    attach: function(context, settings) {      // Handler to save the state      var $form = $('#citethispage-backend-selection-form', context);      $('input[type=submit]', $form).mouseenter(function() {        // We do this on mousenter as it has be done before mousedown        saveState($form);      });      // If required, restore the state      if (typeof Drupal.settings.scratchpads_citethispage !== 'undefined') {        setTimeout(function() {          restoreState(context);        }, 1000);      }    }  }})(jQuery);;/**//** * @file *   Unlock protected forms by resetting the form action to the path that *   it should be, only if the current user is verified to be human. */(function ($) {  Drupal.antibot = {};    Drupal.behaviors.antibot = {    attach: function (context) {      // Assume the user is not human, despite JS being enabled      Drupal.settings.antibot.human = false;            // Display the hidden forms      $('.antibot-hidden', context).show();      // Remove the "no javascript" messages      $('.antibot-no-js', context).remove();            // Wait for a mouse to move, indicating they are human      $('body').mousemove(function() {        // Unlock the forms        Drupal.antibot.unlockForms();      });            // A tab or enter key pressed can also indicate they are human      $('body').keydown(function(e) {        if ((e.keyCode == 9) || (e.keyCode == 13)) {          // Unlock the forms          Drupal.antibot.unlockForms();        }      });    }  }    /**   * Revert the action on the protected forms to what it was originally   * set to.   */  Drupal.antibot.unlockForms = function() {    // Act only if we haven't yet verified this user as being human    if (!Drupal.settings.antibot.human) {      // Iterate all antibot form actions that we need to revert      for (n in Drupal.settings.antibot.actions) {        $('form#' + n).attr('action', Drupal.settings.antibot.actions[n]);      }      // Mark this user as being human      Drupal.settings.antibot.human = true;    }  }})(jQuery);;/**/(function ($) {Drupal.behaviors.openid = {  attach: function (context) {    var loginElements = $('.form-item-name, .form-item-pass, li.openid-link');    var openidElements = $('.form-item-openid-identifier, li.user-link');    var cookie = $.cookie('Drupal.visitor.openid_identifier');    // This behavior attaches by ID, so is only valid once on a page.    if (!$('#edit-openid-identifier.openid-processed').length) {      if (cookie) {        $('#edit-openid-identifier').val(cookie);      }      if ($('#edit-openid-identifier').val() || location.hash == '#openid-login') {        $('#edit-openid-identifier').addClass('openid-processed');        loginElements.hide();        // Use .css('display', 'block') instead of .show() to be Konqueror friendly.        openidElements.css('display', 'block');      }    }    $('li.openid-link:not(.openid-processed)', context)      .addClass('openid-processed')      .click(function () {         loginElements.hide();         openidElements.css('display', 'block');        // Remove possible error message.        $('#edit-name, #edit-pass').removeClass('error');        $('div.messages.error').hide();        // Set focus on OpenID Identifier field.        $('#edit-openid-identifier')[0].focus();        return false;      });    $('li.user-link:not(.openid-processed)', context)      .addClass('openid-processed')      .click(function () {         openidElements.hide();         loginElements.css('display', 'block');        // Clear OpenID Identifier field and remove possible error message.        $('#edit-openid-identifier').val('').removeClass('error');        $('div.messages.error').css('display', 'block');        // Set focus on username field.        $('#edit-name')[0].focus();        return false;      });  }};})(jQuery);;/**/(function ($) {/** * Attaches the autocomplete behavior to all required fields. */Drupal.behaviors.autocomplete = {  attach: function (context, settings) {    var acdb = [];    $('input.autocomplete', context).once('autocomplete', function () {      var uri = this.value;      if (!acdb[uri]) {        acdb[uri] = new Drupal.ACDB(uri);      }      var $input = $('#' + this.id.substr(0, this.id.length - 13))        .attr('autocomplete', 'OFF')        .attr('aria-autocomplete', 'list');      $($input[0].form).submit(Drupal.autocompleteSubmit);      $input.parent()        .attr('role', 'application')        .append($('<span class="element-invisible" aria-live="assertive"></span>')          .attr('id', $input.attr('id') + '-autocomplete-aria-live')        );      new Drupal.jsAC($input, acdb[uri]);    });  }};/** * Prevents the form from submitting if the suggestions popup is open * and closes the suggestions popup when doing so. */Drupal.autocompleteSubmit = function () {  return $('#autocomplete').each(function () {    this.owner.hidePopup();  }).length == 0;};/** * An AutoComplete object. */Drupal.jsAC = function ($input, db) {  var ac = this;  this.input = $input[0];  this.ariaLive = $('#' + this.input.id + '-autocomplete-aria-live');  this.db = db;  $input    .keydown(function (event) { return ac.onkeydown(this, event); })    .keyup(function (event) { ac.onkeyup(this, event); })    .blur(function () { ac.hidePopup(); ac.db.cancel(); });};/** * Handler for the "keydown" event. */Drupal.jsAC.prototype.onkeydown = function (input, e) {  if (!e) {    e = window.event;  }  switch (e.keyCode) {    case 40: // down arrow.      this.selectDown();      return false;    case 38: // up arrow.      this.selectUp();      return false;    default: // All other keys.      return true;  }};/** * Handler for the "keyup" event. */Drupal.jsAC.prototype.onkeyup = function (input, e) {  if (!e) {    e = window.event;  }  switch (e.keyCode) {    case 16: // Shift.    case 17: // Ctrl.    case 18: // Alt.    case 20: // Caps lock.    case 33: // Page up.    case 34: // Page down.    case 35: // End.    case 36: // Home.    case 37: // Left arrow.    case 38: // Up arrow.    case 39: // Right arrow.    case 40: // Down arrow.      return true;    case 9:  // Tab.    case 13: // Enter.    case 27: // Esc.      this.hidePopup(e.keyCode);      return true;    default: // All other keys.      if (input.value.length > 0 && !input.readOnly) {        this.populatePopup();      }      else {        this.hidePopup(e.keyCode);      }      return true;  }};/** * Puts the currently highlighted suggestion into the autocomplete field. */Drupal.jsAC.prototype.select = function (node) {  this.input.value = $(node).data('autocompleteValue');  $(this.input).trigger('autocompleteSelect', [node]);};/** * Highlights the next suggestion. */Drupal.jsAC.prototype.selectDown = function () {  if (this.selected && this.selected.nextSibling) {    this.highlight(this.selected.nextSibling);  }  else if (this.popup) {    var lis = $('li', this.popup);    if (lis.length > 0) {      this.highlight(lis.get(0));    }  }};/** * Highlights the previous suggestion. */Drupal.jsAC.prototype.selectUp = function () {  if (this.selected && this.selected.previousSibling) {    this.highlight(this.selected.previousSibling);  }};/** * Highlights a suggestion. */Drupal.jsAC.prototype.highlight = function (node) {  if (this.selected) {    $(this.selected).removeClass('selected');  }  $(node).addClass('selected');  this.selected = node;  $(this.ariaLive).html($(this.selected).html());};/** * Unhighlights a suggestion. */Drupal.jsAC.prototype.unhighlight = function (node) {  $(node).removeClass('selected');  this.selected = false;  $(this.ariaLive).empty();};/** * Hides the autocomplete suggestions. */Drupal.jsAC.prototype.hidePopup = function (keycode) {  // Select item if the right key or mousebutton was pressed.  if (this.selected && ((keycode && keycode != 46 && keycode != 8 && keycode != 27) || !keycode)) {    this.select(this.selected);  }  // Hide popup.  var popup = this.popup;  if (popup) {    this.popup = null;    $(popup).fadeOut('fast', function () { $(popup).remove(); });  }  this.selected = false;  $(this.ariaLive).empty();};/** * Positions the suggestions popup and starts a search. */Drupal.jsAC.prototype.populatePopup = function () {  var $input = $(this.input);  var position = $input.position();  // Show popup.  if (this.popup) {    $(this.popup).remove();  }  this.selected = false;  this.popup = $('<div id="autocomplete"></div>')[0];  this.popup.owner = this;  $(this.popup).css({    top: parseInt(position.top + this.input.offsetHeight, 10) + 'px',    left: parseInt(position.left, 10) + 'px',    width: $input.innerWidth() + 'px',    display: 'none'  });  $input.before(this.popup);  // Do search.  this.db.owner = this;  this.db.search(this.input.value);};/** * Fills the suggestion popup with any matches received. */Drupal.jsAC.prototype.found = function (matches) {  // If no value in the textfield, do not show the popup.  if (!this.input.value.length) {    return false;  }  // Prepare matches.  var ul = $('<ul></ul>');  var ac = this;  for (key in matches) {    $('<li></li>')      .html($('<div></div>').html(matches[key]))      .mousedown(function () { ac.hidePopup(this); })      .mouseover(function () { ac.highlight(this); })      .mouseout(function () { ac.unhighlight(this); })      .data('autocompleteValue', key)      .appendTo(ul);  }  // Show popup with matches, if any.  if (this.popup) {    if (ul.children().length) {      $(this.popup).empty().append(ul).show();      $(this.ariaLive).html(Drupal.t('Autocomplete popup'));    }    else {      $(this.popup).css({ visibility: 'hidden' });      this.hidePopup();    }  }};Drupal.jsAC.prototype.setStatus = function (status) {  switch (status) {    case 'begin':      $(this.input).addClass('throbbing');      $(this.ariaLive).html(Drupal.t('Searching for matches...'));      break;    case 'cancel':    case 'error':    case 'found':      $(this.input).removeClass('throbbing');      break;  }};/** * An AutoComplete DataBase object. */Drupal.ACDB = function (uri) {  this.uri = uri;  this.delay = 300;  this.cache = {};};/** * Performs a cached and delayed search. */Drupal.ACDB.prototype.search = function (searchString) {  var db = this;  this.searchString = searchString;  // See if this string needs to be searched for anyway. The pattern ../ is  // stripped since it may be misinterpreted by the browser.  searchString = searchString.replace(/^\s+|\.{2,}\/|\s+$/g, '');  // Skip empty search strings, or search strings ending with a comma, since  // that is the separator between search terms.  if (searchString.length <= 0 ||    searchString.charAt(searchString.length - 1) == ',') {    return;  }  // See if this key has been searched for before.  if (this.cache[searchString]) {    return this.owner.found(this.cache[searchString]);  }  // Initiate delayed search.  if (this.timer) {    clearTimeout(this.timer);  }  this.timer = setTimeout(function () {    db.owner.setStatus('begin');    // Ajax GET request for autocompletion. We use Drupal.encodePath instead of    // encodeURIComponent to allow autocomplete search terms to contain slashes.    $.ajax({      type: 'GET',      url: db.uri + '/' + Drupal.encodePath(searchString),      dataType: 'json',      success: function (matches) {        if (typeof matches.status == 'undefined' || matches.status != 0) {          db.cache[searchString] = matches;          // Verify if these are still the matches the user wants to see.          if (db.searchString == searchString) {            db.owner.found(matches);          }          db.owner.setStatus('found');        }      },      error: function (xmlhttp) {        Drupal.displayAjaxError(Drupal.ajaxError(xmlhttp, db.uri));      }    });  }, this.delay);};/** * Cancels the current autocomplete request. */Drupal.ACDB.prototype.cancel = function () {  if (this.owner) this.owner.setStatus('cancel');  if (this.timer) clearTimeout(this.timer);  this.searchString = '';};})(jQuery);;/**/(function($){  $(document).ready(function(){    $('input[name="search_block_form"]').removeClass('form-autocomplete');    $('input[name="entity_type"]').change(function(event){      if($('input[name="entity_type"]:checked').first().attr('value') == '_taxonomy') {        $('input[name="search_block_form"]').addClass('form-autocomplete');      } else {        $('input[name="search_block_form"]').removeClass('form-autocomplete');      }    });  })})(jQuery);;/**/(function($){  Drupal.behaviors.scratchpads = {attach: function(context){    // Slide Toggles    // Re-organise the login block to make this easier    $('#zone-slide-top #block-user-login', context).addClass('scratchpads-slide-toggle-container');    $('#region-slide-top a[href="' + Drupal.settings.basePath + Drupal.settings.pathPrefix + 'user"]', context).detach().appendTo('#zone-slide-top #block-user-login');    $('#zone-slide-top #block-user-login form', context).addClass('scratchpads-slide-toggle-body');    // Place the labels in the top region    var pos = 0;    $('#zone-slide-top .scratchpads-slide-toggle', context).each(function() {      $(this).css('right', pos.toString() + "px");      pos = pos + parseInt($(this).width()) + 30;    });    $('#region-secondary-menu', context).css('right', pos.toString() + "px");    $('.scratchpads-slide-toggle', context).once().click(function(){      var body = $(this).parents('.scratchpads-slide-toggle-container').find('.scratchpads-slide-toggle-body');      $(this).parents('.zone-wrapper').find('.scratchpads-slide-toggle-body:visible').not(body).slideToggle();      body.slideToggle();      return false;    });  }};  if(Drupal.jsAC) {    /**     * Override this core function so that we set the minWidth, and not the     * width.     */    Drupal.jsAC.prototype.populatePopup = function(){      var $input = $(this.input);      var position = $input.position();      // Show popup.      if(this.popup) {        $(this.popup).remove();      }      this.selected = false;      this.popup = $('<div id="autocomplete"></div>')[0];      this.popup.owner = this;      $(this.popup).css({top: parseInt(position.top + this.input.offsetHeight, 10) + 'px', left: parseInt(position.left, 10) + 'px', minWidth: $input.innerWidth() + 'px', display: 'none'});      $input.before(this.popup);      // Do search.      this.db.owner = this;      this.db.search(this.input.value);    };    /**     * Because we're using minWidth, we need to override this to allow us to     * alter the position if the box is too big.     */    Drupal.jsAC.prototype.found = function(matches){      // If no value in the textfield, do not show the popup.      if(!this.input.value.length) {        return false;      }      // Prepare matches.      var ul = $('<ul></ul>');      var ac = this;      for(key in matches) {        $('<li></li>').html($('<div></div>').html(matches[key])).mousedown(function(){          ac.select(this);        }).mouseover(function(){          ac.highlight(this);        }).mouseout(function(){          ac.unhighlight(this);        }).data('autocompleteValue', key).appendTo(ul);      }      // Show popup with matches, if any.      if(this.popup) {        if(ul.children().length) {          $(this.popup).empty().append(ul).show();          var offset = $(this.popup).offset();          if((offset.left + $(this.popup).width()) > $(window).width()) {            var left_move = (offset.left + $(this.popup).width() + 5) - $(window).width();            if(left_move > offset.left) {              left_move = offset.left;            }            $(this.popup).css('left', '-' + left_move + 'px');          }          $(this.ariaLive).html(Drupal.t('Autocomplete popup'));        } else {          $(this.popup).css({visibility: 'hidden'});          this.hidePopup();        }      }    };  }})(jQuery);;/**//*  Formalize - version 1.1  Note: This file depends on the jQuery library.*/// Module pattern:// http://yuiblog.com/blog/2007/06/12/module-patternvar FORMALIZE = (function($, window, document, undefined) {  // Private constants.  var PLACEHOLDER_SUPPORTED = 'placeholder' in document.createElement('input');  var AUTOFOCUS_SUPPORTED = 'autofocus' in document.createElement('input');  var IE6 = !!($.browser.msie && parseInt($.browser.version, 10) === 6);  var IE7 = !!($.browser.msie && parseInt($.browser.version, 10) === 7);  // Expose innards of FORMALIZE.  return {    // FORMALIZE.go    go: function() {      for (var i in FORMALIZE.init) {        FORMALIZE.init[i]();      }    },    // FORMALIZE.init    init: {      // FORMALIZE.init.ie6_skin_inputs      ie6_skin_inputs: function() {        // Test for Internet Explorer 6.        if (!IE6 || !$('input, select, textarea').length) {          // Exit if the browser is not IE6,          // or if no form elements exist.          return;        }        // For <input type="submit" />, etc.        var button_regex = /button|submit|reset/;        // For <input type="text" />, etc.        var type_regex = /date|datetime|datetime-local|email|month|number|password|range|search|tel|text|time|url|week/;        $('input').each(function() {          var el = $(this);          // Is it a button?          if (this.getAttribute('type').match(button_regex)) {            el.addClass('ie6-button');            /* Is it disabled? */            if (this.disabled) {              el.addClass('ie6-button-disabled');            }          }          // Or is it a textual input?          else if (this.getAttribute('type').match(type_regex)) {            el.addClass('ie6-input');            /* Is it disabled? */            if (this.disabled) {              el.addClass('ie6-input-disabled');            }          }        });        $('textarea, select').each(function() {          /* Is it disabled? */          if (this.disabled) {            $(this).addClass('ie6-input-disabled');          }        });      },      // FORMALIZE.init.autofocus      autofocus: function() {        if (AUTOFOCUS_SUPPORTED || !$(':input[autofocus]').length) {          return;        }        $(':input[autofocus]:visible:first').focus();      },      // FORMALIZE.init.placeholder      placeholder: function() {        if (PLACEHOLDER_SUPPORTED || !$(':input[placeholder]').length) {          // Exit if placeholder is supported natively,          // or if page does not have any placeholder.          return;        }        FORMALIZE.misc.add_placeholder();        $(':input[placeholder]').each(function() {          var el = $(this);          var text = el.attr('placeholder');          el.focus(function() {            if (el.val() === text) {              el.val('').removeClass('placeholder-text');            }          }).blur(function() {            FORMALIZE.misc.add_placeholder();          });          // Prevent <form> from accidentally          // submitting the placeholder text.          el.closest('form').submit(function() {            if (el.val() === text) {              el.val('').removeClass('placeholder-text');            }          }).bind('reset', function() {            setTimeout(FORMALIZE.misc.add_placeholder, 50);          });        });      }    },    // FORMALIZE.misc    misc: {      // FORMALIZE.misc.add_placeholder      add_placeholder: function() {        if (PLACEHOLDER_SUPPORTED || !$(':input[placeholder]').length) {          // Exit if placeholder is supported natively,          // or if page does not have any placeholder.          return;        }        $(':input[placeholder]').each(function() {          var el = $(this);          var text = el.attr('placeholder');          if (!el.val() || el.val() === text) {            el.val(text).addClass('placeholder-text');          }        });      }    }  };// Alias jQuery, window, document.})(jQuery, this, this.document);// Automatically calls all functions in FORMALIZE.initjQuery(document).ready(function() {  FORMALIZE.go();});;/**//** * @todo */Drupal.omega = Drupal.omega || {};(function($) {  /**   * @todo   */  var current;  var previous;    /**   * @todo   */  var setCurrentLayout = function (index) {    index = parseInt(index);    previous = current;    current = Drupal.settings.omega.layouts.order.hasOwnProperty(index) ? Drupal.settings.omega.layouts.order[index] : 'mobile';    if (previous != current) {            $('body').removeClass('responsive-layout-' + previous).addClass('responsive-layout-' + current);            $.event.trigger('responsivelayout', {from: previous, to: current});    }  };    /**   * @todo   */  Drupal.omega.getCurrentLayout = function () {    return current;  };    /**   * @todo   */  Drupal.omega.getPreviousLayout = function () {    return previous;  };    /**   * @todo   */  Drupal.omega.crappyBrowser = function () {    return $.browser.msie && parseInt($.browser.version, 10) < 9;  };    /**   * @todo   */  Drupal.omega.checkLayout = function (layout) {    if (Drupal.settings.omega.layouts.queries.hasOwnProperty(layout) && Drupal.settings.omega.layouts.queries[layout]) {      var output = Drupal.omega.checkQuery(Drupal.settings.omega.layouts.queries[layout]);            if (!output && layout == Drupal.settings.omega.layouts.primary) {        var dummy = $('<div id="omega-check-query"></div>').prependTo('body');               dummy.append('<style media="all">#omega-check-query { position: relative; z-index: -1; }</style>');        dummy.append('<!--[if (lt IE 9)&(!IEMobile)]><style media="all">#omega-check-query { z-index: 100; }</style><![endif]-->');                output = parseInt(dummy.css('z-index')) == 100;        dummy.remove();      }            return output;    }    return false;  };    /**   * @todo   */  Drupal.omega.checkQuery = function (query) {    var dummy = $('<div id="omega-check-query"></div>').prependTo('body');               dummy.append('<style media="all">#omega-check-query { position: relative; z-index: -1; }</style>');    dummy.append('<style media="' + query + '">#omega-check-query { z-index: 100; }</style>');    var output = parseInt(dummy.css('z-index')) == 100;        dummy.remove();    return output;  };    /**   * @todo   */  Drupal.behaviors.omegaMediaQueries = {    attach: function (context) {      $('body', context).once('omega-mediaqueries', function () {        var primary = $.inArray(Drupal.settings.omega.layouts.primary, Drupal.settings.omega.layouts.order);        var dummy = $('<div id="omega-media-query-dummy"></div>').prependTo('body');        dummy.append('<style media="all">#omega-media-query-dummy { position: relative; z-index: -1; }</style>');        dummy.append('<!--[if (lt IE 9)&(!IEMobile)]><style media="all">#omega-media-query-dummy { z-index: ' + primary + '; }</style><![endif]-->');        for (var i in Drupal.settings.omega.layouts.order) {          dummy.append('<style media="' + Drupal.settings.omega.layouts.queries[Drupal.settings.omega.layouts.order[i]] + '">#omega-media-query-dummy { z-index: ' + i + '; }</style>');        }        $(window).bind('resize.omegamediaqueries', function () {          setCurrentLayout(dummy.css('z-index'));        }).load(function () {          $(this).trigger('resize.omegamediaqueries');        });      });    }  };})(jQuery);;/**/